{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "contracts/TogetherForCharityContractFactory.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"./TogetherForCharityWithTarget.sol\";\nimport \"./TogetherForCharityWithSteps.sol\";\nimport \"./TogetherForCharityWithTime.sol\";\n\nerror TogetherForCharityContractFactory__RegisterUpkeepFailed();\nerror TogetherForCharityContractFactory__TransferFailed();\nerror TogetherForCharityContractFactory__TooManySteps();\n\ncontract TogetherForCharityContractFactory {\n    /* State Variables */\n    address[] private deployedCampaigns;\n    uint256 private numberOfCampaigns;\n\n    /* Constructor */\n    constructor() {\n        deployedCampaigns = new address[](0);\n        numberOfCampaigns = 0;\n    }\n\n    /* Functions */\n    function createCampaignWithTarget(\n        string memory description,\n        address beneficiary,\n        uint256 targetAmount,\n        uint256 minimumAmount\n    ) public payable {\n        numberOfCampaigns += 1;\n        TogetherForCharityWithTarget newCampaign = new TogetherForCharityWithTarget(\n                numberOfCampaigns,\n                description,\n                msg.sender,\n                beneficiary,\n                msg.value,\n                targetAmount,\n                minimumAmount\n            );\n\n        deployedCampaigns.push(address(newCampaign));\n\n        emit CampaignCreated(\n            numberOfCampaigns,\n            address(newCampaign),\n            msg.sender,\n            beneficiary,\n            0 // Capaign With Target\n        );\n\n        newCampaign.fundCampaign{value: msg.value}(msg.sender);\n\n        emit EthSentToCampaign(\n            numberOfCampaigns,\n            address(newCampaign),\n            msg.value\n        );\n    }\n\n    function createCampaignWithTime(\n        string memory description,\n        address beneficiary,\n        uint256 totalTime,\n        uint256 minimumAmount\n    ) public payable {\n        numberOfCampaigns += 1;\n        TogetherForCharityWithTime newCampaign = new TogetherForCharityWithTime(\n            numberOfCampaigns,\n            description,\n            msg.sender,\n            beneficiary,\n            msg.value,\n            totalTime,\n            minimumAmount\n        );\n\n        deployedCampaigns.push(address(newCampaign));\n\n        emit CampaignCreated(\n            numberOfCampaigns,\n            address(newCampaign),\n            msg.sender,\n            beneficiary,\n            1 // Capaign With Time\n        );\n\n        newCampaign.fundCampaign{value: msg.value}(msg.sender);\n\n        emit EthSentToCampaign(\n            numberOfCampaigns,\n            address(newCampaign),\n            msg.value\n        );\n    }\n\n    function createCampaignWithSteps(\n        string memory description,\n        address beneficiary,\n        uint256 minimumAmount,\n        uint256 targetAmount,\n        uint16 steps,\n        uint256 stepTimeInterval\n    ) public payable {\n        if (steps > 5) {\n            revert TogetherForCharityContractFactory__TooManySteps();\n        }\n        numberOfCampaigns += 1;\n        TogetherForCharityWithSteps newCampaign = new TogetherForCharityWithSteps(\n                numberOfCampaigns,\n                description,\n                msg.sender,\n                beneficiary,\n                msg.value,\n                minimumAmount,\n                targetAmount,\n                steps,\n                stepTimeInterval\n            );\n\n        deployedCampaigns.push(address(newCampaign));\n\n        emit CampaignCreated(\n            numberOfCampaigns,\n            address(newCampaign),\n            msg.sender,\n            beneficiary,\n            2 // Capaign With Steps\n        );\n\n        newCampaign.fundCampaign{value: msg.value}(msg.sender);\n\n        emit EthSentToCampaign(\n            numberOfCampaigns,\n            address(newCampaign),\n            msg.value\n        );\n    }\n\n    function getDeployedCampaigns() public view returns (address[] memory) {\n        return deployedCampaigns;\n    }\n\n    function getNumberOfCampaigns() public view returns (uint256) {\n        return numberOfCampaigns;\n    }\n\n    /* Events */\n    event CampaignCreated(\n        uint256 campaignID,\n        address indexed campaignAddress,\n        address indexed creator,\n        address indexed beneficiary,\n        uint8 campaignType\n    );\n\n    event EthSentToCampaign(\n        uint256 campaignID,\n        address indexed campaignAddress,\n        uint256 amount\n    );\n}\n"
    },
    "contracts/TogetherForCharityWithSteps.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\n/* Errors */\nerror TogetherForCharityWithSteps__CampaignClosed(uint256);\nerror TogetherForCharityWithSteps__CampaignOpen(uint256);\nerror TogetherForCharityWithSteps__TooSmallDonation();\nerror TogetherForCharityWithSteps__TransferFailed(address, uint256);\nerror TogetherForCharityWithSteps__IsNotVoter(address);\nerror TogetherForCharityWithSteps__VoteNotNeeded();\nerror TogetherForCharityWithSteps__AlreadyVoted(address);\nerror TogetherForCharityWithSteps__UpkeepNotNeeded();\n\ncontract TogetherForCharityWithSteps {\n    /* Modifiers */\n    modifier CampaignOpen() {\n        if (state != CampaignState.OPEN) {\n            // If the campaign is closed\n            revert TogetherForCharityWithSteps__CampaignClosed(campaignID);\n        }\n        _;\n    }\n\n    modifier CampaignClosed() {\n        if (state != CampaignState.CLOSED) {\n            // If the campaign is open\n            revert TogetherForCharityWithSteps__CampaignOpen(campaignID);\n        }\n        _;\n    }\n\n    modifier CanVote(address voter) {\n        if (currentStep == 0) {\n            revert TogetherForCharityWithSteps__VoteNotNeeded();\n        } else {\n            bool found = false;\n\n            for (uint256 i = 0; i < allowedVotersCurrentStep.length; i++) {\n                if (allowedVotersCurrentStep[i] == voter) {\n                    found = true;\n                }\n            }\n            if (found == false) {\n                revert TogetherForCharityWithSteps__IsNotVoter(voter);\n            }\n        }\n        _;\n    }\n\n    modifier NotAlreadyVoted(address voter) {\n        if (\n            (votes[currentStep][voter] == VoteType.TRUE) ||\n            (votes[currentStep][voter] == VoteType.FALSE)\n        ) {\n            revert TogetherForCharityWithSteps__AlreadyVoted(voter);\n        }\n        _;\n    }\n\n    /* Type declarations */\n    enum CampaignState {\n        OPEN,\n        CLOSED\n    }\n\n    enum VoteType {\n        NOT_VOTED,\n        TRUE,\n        FALSE\n    }\n\n    /* Campaign Variables */\n    uint256 private campaignID;\n    string private description;\n    address private creator;\n    CampaignState private state;\n    address payable private beneficiary;\n    address[] private funders;\n    address[] private allowedVotersCurrentStep;\n    address[] private allowedVotersNextStep;\n    mapping(address => uint256) private fundersToAmount;\n    mapping(uint16 => mapping(address => VoteType)) private votes; // For each step there is a mapping from the voter to the vote\n    uint256 private totalFunded;\n    uint256 private targetAmount;\n    uint256 private createdTimestamp;\n    uint256 private newStepTimestamp;\n    uint256 private maxTime;\n    uint16 private currentStep;\n    uint16 private steps;\n    uint256 private stepTimeInterval;\n    uint256 private minimumDonation;\n\n    /* Constructor */\n    constructor(\n        uint256 _campaignID,\n        string memory _description,\n        address _creator,\n        address _beneficiary,\n        uint256 _amountFunded,\n        uint256 _minimumAmount,\n        uint256 _targetAmount,\n        uint16 _steps,\n        uint256 _stepTimeInterval\n    ) {\n        campaignID = _campaignID;\n        description = _description;\n        creator = _creator;\n        state = CampaignState.OPEN;\n        beneficiary = payable(_beneficiary);\n        fundersToAmount[_creator] = _amountFunded;\n        totalFunded = 0;\n        targetAmount = _targetAmount;\n        createdTimestamp = block.timestamp;\n        maxTime = 789 * (10 ** 4); // 3 month\n        stepTimeInterval = _stepTimeInterval;\n        minimumDonation = _minimumAmount;\n        currentStep = 0;\n        steps = _steps;\n    }\n\n    /* Functions */\n    function fundCampaign(address funder) public payable CampaignOpen {\n        if (msg.value < minimumDonation) {\n            revert TogetherForCharityWithSteps__TooSmallDonation();\n        }\n\n        if (funder == address(0)) {\n            funders.push(msg.sender);\n            fundersToAmount[msg.sender] = msg.value;\n        } else {\n            funders.push(funder);\n            fundersToAmount[funder] = msg.value;\n        }\n\n        totalFunded += msg.value;\n\n        emit CampaignFunded(campaignID, msg.sender, msg.value);\n\n        if (totalFunded >= targetAmount) {\n            state = CampaignState.CLOSED;\n            deliverStep();\n        }\n    }\n\n    function deliverStep() internal CampaignClosed {\n        uint256 amountToSend = address(this).balance / (steps - currentStep);\n\n        (bool success, ) = beneficiary.call{value: amountToSend}(\"\");\n        if (!success) {\n            revert TogetherForCharityWithSteps__TransferFailed(\n                beneficiary,\n                amountToSend\n            );\n        } else {\n            emit StepDelivered(\n                campaignID,\n                beneficiary,\n                amountToSend,\n                currentStep + 1\n            );\n        }\n\n        if (currentStep == 0) {\n            for (uint256 i = 0; i < funders.length; i++) {\n                allowedVotersCurrentStep.push(funders[i]);\n            }\n        } else if (currentStep > 0) {\n            for (uint256 i = 0; i < allowedVotersCurrentStep.length; i++) {\n                if (\n                    votes[currentStep][allowedVotersCurrentStep[i]] ==\n                    VoteType.NOT_VOTED\n                ) {\n                    allowedVotersNextStep.push(allowedVotersCurrentStep[i]);\n                }\n            }\n\n            allowedVotersCurrentStep = new address[](0);\n\n            for (uint256 i = 0; i < allowedVotersNextStep.length; i++) {\n                allowedVotersCurrentStep.push(allowedVotersNextStep[i]);\n            }\n\n            allowedVotersNextStep = new address[](0);\n        }\n        currentStep++;\n        newStepTimestamp = block.timestamp;\n    }\n\n    function voteForNextStep(\n        bool vote\n    ) public CanVote(msg.sender) NotAlreadyVoted(msg.sender) CampaignClosed {\n        if (vote == true) {\n            votes[currentStep][msg.sender] = VoteType.TRUE;\n            allowedVotersNextStep.push(msg.sender);\n        } else if (vote == false) {\n            votes[currentStep][msg.sender] = VoteType.FALSE;\n            uint256 amountToSend = fundersToAmount[msg.sender] -\n                ((fundersToAmount[msg.sender] / steps) * currentStep);\n\n            (bool success, ) = msg.sender.call{value: amountToSend}(\"\");\n            if (!success) {\n                revert TogetherForCharityWithSteps__TransferFailed(\n                    msg.sender,\n                    amountToSend\n                );\n            }\n            fundersToAmount[msg.sender] -= amountToSend;\n            totalFunded -= amountToSend;\n            emit FunderRefunded(campaignID, msg.sender, amountToSend);\n        }\n    }\n\n    function checkUpkeep() public view returns (bool) {\n        if (currentStep == 0) {\n            bool timePassed = ((block.timestamp - createdTimestamp) > maxTime);\n            bool isOpen = (CampaignState.OPEN == state);\n\n            return (timePassed && isOpen);\n        } else if (currentStep > 0) {\n            bool timePassed = ((block.timestamp - newStepTimestamp) >\n                stepTimeInterval);\n            bool isClosed = (CampaignState.CLOSED == state);\n\n            return (timePassed && isClosed);\n        }\n    }\n\n    function performUpkeep() public {\n        bool upkeepNeeded = checkUpkeep();\n\n        if (!upkeepNeeded) {\n            revert TogetherForCharityWithSteps__UpkeepNotNeeded();\n        }\n\n        if (CampaignState.OPEN == state) {\n            state = CampaignState.CLOSED;\n        }\n\n        deliverStep();\n    }\n\n    /* Events */\n    event CampaignFunded(\n        uint256 indexed campaignID,\n        address indexed funder,\n        uint256 amount\n    );\n    event StepDelivered(\n        uint256 indexed campaignID,\n        address indexed beneficiary,\n        uint256 amount,\n        uint16 step\n    );\n    event FunderRefunded(\n        uint256 indexed campaignID,\n        address indexed funder,\n        uint256 amount\n    );\n\n    function getCampaignID() public view returns (uint256) {\n        return campaignID;\n    }\n\n    function getDescription() public view returns (string memory) {\n        return description;\n    }\n\n    function getCreator() public view returns (address) {\n        return creator;\n    }\n\n    function getCampaignState() public view returns (string memory) {\n        if (state == CampaignState.OPEN) {\n            return \"Open\";\n        } else {\n            return \"Closed\";\n        }\n    }\n\n    function getBeneficiary() public view returns (address) {\n        return beneficiary;\n    }\n\n    function getFunders() public view returns (address[] memory) {\n        return funders;\n    }\n\n    function getAllowedVotersForCurrentStep()\n        public\n        view\n        returns (address[] memory)\n    {\n        return allowedVotersCurrentStep;\n    }\n\n    function getAllowedVotersForNextStep()\n        public\n        view\n        returns (address[] memory)\n    {\n        return allowedVotersNextStep;\n    }\n\n    function getAmountFundedFromFunder(\n        address _funder\n    ) public view returns (uint256) {\n        return fundersToAmount[_funder];\n    }\n\n    function getVoteForCurrentStep(\n        uint16 _step,\n        address _voter\n    ) public view returns (VoteType) {\n        return votes[_step][_voter];\n    }\n\n    function getTotalAmountFunded() public view returns (uint256) {\n        return totalFunded;\n    }\n\n    function getTargetAmount() public view returns (uint256) {\n        return targetAmount;\n    }\n\n    function getTimestampOfCreation() public view returns (uint256) {\n        return createdTimestamp;\n    }\n\n    function getCurrentStepInitialTimestamp() public view returns (uint256) {\n        return newStepTimestamp;\n    }\n\n    function getMaxDurationTimeInSeconds() public view returns (uint256) {\n        return maxTime;\n    }\n\n    function getTotalSteps() public view returns (uint16) {\n        return steps;\n    }\n\n    function getCurrentStep() public view returns (uint16) {\n        return currentStep;\n    }\n\n    function getStepDurationInSeconds() public view returns (uint256) {\n        return stepTimeInterval;\n    }\n\n    function getMinimumDonation() public view returns (uint256) {\n        return minimumDonation;\n    }\n\n    function getCampaignAddress() public view returns (address) {\n        return address(this);\n    }\n\n    function getCampaignType() public pure returns (string memory) {\n        return \"Steps\";\n    }\n}\n"
    },
    "contracts/TogetherForCharityWithTarget.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\n/* Errors */\nerror TogetherForCharityWithTarget__TooSmallDonation();\nerror TogetherForCharityWithTarget__CampaignClosed(uint256);\nerror TogetherForCharityWithTarget__TransferFailed(address, uint256);\nerror TogetherForCharityWithTarget__UpkeepNotNeeded();\n\ncontract TogetherForCharityWithTarget {\n    /* Modifiers */\n    modifier CampaignClosed() {\n        if (state != CampaignState.OPEN) {\n            // If the campaign is close\n            revert TogetherForCharityWithTarget__CampaignClosed(campaignID);\n        }\n        _;\n    }\n\n    /* Type declarations */\n    enum CampaignState {\n        OPEN,\n        CLOSED\n    }\n\n    /* Campaign Variables */\n    uint256 private campaignID;\n    string private description;\n    address private creator;\n    CampaignState private state;\n    address payable private beneficiary;\n    address[] private funders;\n    mapping(address => uint256) private fundersToAmount;\n    uint256 private totalFunded;\n    uint256 private createdTimestamp;\n    uint256 private maxTime;\n    uint256 private targetAmount;\n    uint256 private minimumDonation;\n\n    /* Constructor */\n    constructor(\n        uint256 _campaignID,\n        string memory _description,\n        address _creator,\n        address _beneficiary,\n        uint256 _amountFunded,\n        uint256 _targetAmount,\n        uint256 _minimumAmount\n    ) {\n        campaignID = _campaignID;\n        description = _description;\n        creator = _creator;\n        state = CampaignState.OPEN;\n        beneficiary = payable(_beneficiary);\n        fundersToAmount[_creator] = _amountFunded;\n        totalFunded = 0;\n        createdTimestamp = block.timestamp;\n        maxTime = 789 * (10 ** 4); // 3 month\n        targetAmount = _targetAmount;\n        minimumDonation = _minimumAmount;\n    }\n\n    /* Functions */\n    function fundCampaign(address funder) public payable CampaignClosed {\n        if (msg.value < minimumDonation) {\n            revert TogetherForCharityWithTarget__TooSmallDonation();\n        }\n\n        if (funder == address(0)) {\n            funders.push(msg.sender);\n            fundersToAmount[msg.sender] = msg.value;\n        } else {\n            funders.push(funder);\n            fundersToAmount[funder] = msg.value;\n        }\n\n        totalFunded += msg.value;\n\n        emit CampaignFunded(campaignID, msg.sender, msg.value);\n\n        if (totalFunded >= targetAmount) {\n            deliverCampaign();\n        }\n    }\n\n    function deliverCampaign() internal CampaignClosed {\n        (bool success, ) = beneficiary.call{value: address(this).balance}(\"\");\n        if (!success) {\n            revert TogetherForCharityWithTarget__TransferFailed(\n                beneficiary,\n                address(this).balance\n            );\n        }\n\n        state = CampaignState.CLOSED; // Campaign Closed\n\n        emit CampaignDelivered(campaignID, beneficiary, totalFunded);\n    }\n\n    function checkUpkeep() public view returns (bool) {\n        bool timePassed = ((block.timestamp - createdTimestamp) > maxTime);\n        bool isOpen = (CampaignState.OPEN == state);\n\n        return (timePassed && isOpen);\n    }\n\n    function performUpkeep() public {\n        bool upkeepNeeded = checkUpkeep();\n\n        if (!upkeepNeeded) {\n            revert TogetherForCharityWithTarget__UpkeepNotNeeded();\n        }\n\n        for (uint256 i = 0; i < funders.length; i++) {\n            (bool success, ) = funders[i].call{\n                value: fundersToAmount[funders[i]]\n            }(\"\");\n            if (!success) {\n                revert TogetherForCharityWithTarget__TransferFailed(\n                    funders[i],\n                    fundersToAmount[funders[i]]\n                );\n            }\n        }\n\n        state = CampaignState.CLOSED; // Closing campaign\n\n        emit CampaignNotDelivered(campaignID, beneficiary);\n    }\n\n    function getCampaignID() public view returns (uint256) {\n        return campaignID;\n    }\n\n    function getDescription() public view returns (string memory) {\n        return description;\n    }\n\n    function getCreator() public view returns (address) {\n        return creator;\n    }\n\n    function getCampaignState() public view returns (CampaignState) {\n        return state;\n    }\n\n    function getBeneficiary() public view returns (address) {\n        return beneficiary;\n    }\n\n    function getFunders() public view returns (address[] memory) {\n        return funders;\n    }\n\n    function getAmountFundedFromFunder(\n        address _funder\n    ) public view returns (uint256) {\n        return fundersToAmount[_funder];\n    }\n\n    function getTotalAmountFunded() public view returns (uint256) {\n        return totalFunded;\n    }\n\n    function getTargetAmount() public view returns (uint256) {\n        return targetAmount;\n    }\n\n    function getMinimumDonation() public view returns (uint256) {\n        return minimumDonation;\n    }\n\n    function getMaxCampaignDurationSeconds() public view returns (uint256) {\n        return maxTime;\n    }\n\n    function getCampaignAddress() public view returns (address) {\n        return address(this);\n    }\n\n    function getCampaignType() public pure returns (string memory) {\n        return \"Target\";\n    }\n\n    /* Events */\n    event CampaignFunded(\n        uint256 indexed campaignID,\n        address indexed funder,\n        uint256 amount\n    );\n    event CampaignDelivered(\n        uint256 indexed campaignID,\n        address indexed beneficiary,\n        uint256 amount\n    );\n    event CampaignNotDelivered(\n        uint256 indexed campaignID,\n        address indexed beneficiary\n    );\n}\n"
    },
    "contracts/TogetherForCharityWithTime.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\n/* Errors */\nerror TogetherForCharityWithTime__TooShortDuration();\nerror TogetherForCharityWithTime__TooSmallDonation();\nerror TogetherForCharityWithTime__CampaignClosed(uint256);\nerror TogetherForCharityWithTime__TransferFailed();\nerror TogetherForCharityWithTime__UpkeepNotNeeded();\n\ncontract TogetherForCharityWithTime {\n    /* Modifiers */\n    modifier CampaignClosed() {\n        if (state != CampaignState.OPEN) {\n            // If the campaign is close\n            revert TogetherForCharityWithTime__CampaignClosed(campaignID);\n        }\n        _;\n    }\n\n    /* Type declarations */\n    enum CampaignState {\n        OPEN,\n        CLOSED\n    }\n\n    /* Campaign Variables */\n    uint256 private campaignID;\n    string private description;\n    address private creator;\n    CampaignState private state;\n    address payable private beneficiary;\n    address[] private funders;\n    mapping(address => uint256) private fundersToAmount;\n    uint256 private totalFunded;\n    uint256 private createdTimestamp;\n    uint256 private totalTime;\n    uint256 private minimumDonation;\n\n    /* Constructor */\n    constructor(\n        uint256 _campaignID,\n        string memory _description,\n        address _creator,\n        address _beneficiary,\n        uint256 _amountFunded,\n        uint256 _totalTime,\n        uint256 _minimumAmount\n    ) {\n        campaignID = _campaignID;\n        description = _description;\n        creator = _creator;\n        state = CampaignState.OPEN;\n        beneficiary = payable(_beneficiary);\n        fundersToAmount[_creator] = _amountFunded;\n        totalFunded = 0;\n        createdTimestamp = block.timestamp;\n        totalTime = _totalTime;\n        minimumDonation = _minimumAmount;\n    }\n\n    /* Functions */\n    function fundCampaign(address funder) public payable CampaignClosed {\n        if (msg.value < minimumDonation) {\n            revert TogetherForCharityWithTime__TooSmallDonation();\n        }\n\n        if (funder == address(0)) {\n            funders.push(msg.sender);\n            fundersToAmount[msg.sender] = msg.value;\n        } else {\n            funders.push(funder);\n            fundersToAmount[funder] = msg.value;\n        }\n\n        totalFunded += msg.value;\n\n        emit CampaignFunded(campaignID, msg.sender, msg.value);\n    }\n\n    function checkUpkeep() public view returns (bool) {\n        bool timePassed = ((block.timestamp - createdTimestamp) > totalTime);\n        bool isOpen = (CampaignState.OPEN == state);\n\n        return (timePassed && isOpen);\n    }\n\n    function performUpkeep() public {\n        bool upkeepNeeded = checkUpkeep();\n\n        if (!upkeepNeeded) {\n            revert TogetherForCharityWithTime__UpkeepNotNeeded();\n        }\n\n        (bool success, ) = beneficiary.call{value: address(this).balance}(\"\");\n        if (!success) {\n            revert TogetherForCharityWithTime__TransferFailed();\n        }\n\n        state = CampaignState.CLOSED; // Closing campaign\n\n        emit CampaignDelivered(campaignID, beneficiary, totalFunded);\n    }\n\n    function getCampaignID() public view returns (uint256) {\n        return campaignID;\n    }\n\n    function getDescription() public view returns (string memory) {\n        return description;\n    }\n\n    function getCreator() public view returns (address) {\n        return creator;\n    }\n\n    function getCampaignState() public view returns (CampaignState) {\n        return state;\n    }\n\n    function getBeneficiary() public view returns (address) {\n        return beneficiary;\n    }\n\n    function getFunders() public view returns (address[] memory) {\n        return funders;\n    }\n\n    function getAmountFundedFromFunder(\n        address _funder\n    ) public view returns (uint256) {\n        return fundersToAmount[_funder];\n    }\n\n    function getTotalAmountFunded() public view returns (uint256) {\n        return totalFunded;\n    }\n\n    function getCreationTimeStamp() public view returns (uint256) {\n        return createdTimestamp;\n    }\n\n    function getCampaignDurationSeconds() public view returns (uint256) {\n        return totalTime;\n    }\n\n    function getMinimumDonation() public view returns (uint256) {\n        return minimumDonation;\n    }\n\n    function getCampaignAddress() public view returns (address) {\n        return address(this);\n    }\n\n    function getCampaignType() public pure returns (string memory) {\n        return \"Time\";\n    }\n\n    /* Events */\n    event CampaignFunded(\n        uint256 indexed campaignID,\n        address indexed funder,\n        uint256 amount\n    );\n    event CampaignDelivered(\n        uint256 indexed campaignID,\n        address indexed beneficiary,\n        uint256 amount\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}