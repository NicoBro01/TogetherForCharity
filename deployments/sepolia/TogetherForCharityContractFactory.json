{
  "address": "0x28FB160Db0AA338e167335837cf93E6287378745",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "TogetherForCharityContractFactory__TooManySteps",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "campaignID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "campaignAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "campaignType",
          "type": "uint8"
        }
      ],
      "name": "CampaignCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "campaignID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "campaignAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EthSentToCampaign",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minimumAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "steps",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "stepTimeInterval",
          "type": "uint256"
        }
      ],
      "name": "createCampaignWithSteps",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "targetAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumAmount",
          "type": "uint256"
        }
      ],
      "name": "createCampaignWithTarget",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumAmount",
          "type": "uint256"
        }
      ],
      "name": "createCampaignWithTime",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDeployedCampaigns",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfCampaigns",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xdb15b19a3ca6f3c4489952318efe0c65cfa23fa21e8caa6af37ed8c363f69627",
  "receipt": {
    "to": null,
    "from": "0xa4438eF7BdCEC325d340bF96139d1D5Cb99795c6",
    "contractAddress": "0x28FB160Db0AA338e167335837cf93E6287378745",
    "transactionIndex": 47,
    "gasUsed": "3396192",
    "logsBloom": "0x
    "blockHash": "0x9b5af0d03aa028e0c498119b7cfa825282b4aff6c9ec5c01151ee7f45ab4b8bc",
    "transactionHash": "0xdb15b19a3ca6f3c4489952318efe0c65cfa23fa21e8caa6af37ed8c363f69627",
    "logs": [],
    "blockNumber": 4962771,
    "cumulativeGasUsed": "9308729",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 27,
  "solcInputHash": "3db88b14dcf2589c3f7d7243e0a387f0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"TogetherForCharityContractFactory__TooManySteps\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"campaignID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"campaignAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"campaignType\",\"type\":\"uint8\"}],\"name\":\"CampaignCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"campaignID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"campaignAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EthSentToCampaign\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minimumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"steps\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"stepTimeInterval\",\"type\":\"uint256\"}],\"name\":\"createCampaignWithSteps\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumAmount\",\"type\":\"uint256\"}],\"name\":\"createCampaignWithTarget\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumAmount\",\"type\":\"uint256\"}],\"name\":\"createCampaignWithTime\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDeployedCampaigns\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfCampaigns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TogetherForCharityContractFactory.sol\":\"TogetherForCharityContractFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/TogetherForCharityContractFactory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./TogetherForCharityWithTarget.sol\\\";\\nimport \\\"./TogetherForCharityWithSteps.sol\\\";\\nimport \\\"./TogetherForCharityWithTime.sol\\\";\\n\\nerror TogetherForCharityContractFactory__RegisterUpkeepFailed();\\nerror TogetherForCharityContractFactory__TransferFailed();\\nerror TogetherForCharityContractFactory__TooManySteps();\\n\\ncontract TogetherForCharityContractFactory {\\n    /* State Variables */\\n    address[] private deployedCampaigns;\\n    uint256 private numberOfCampaigns;\\n\\n    /* Constructor */\\n    constructor() {\\n        deployedCampaigns = new address[](0);\\n        numberOfCampaigns = 0;\\n    }\\n\\n    /* Functions */\\n    function createCampaignWithTarget(\\n        string memory description,\\n        address beneficiary,\\n        uint256 targetAmount,\\n        uint256 minimumAmount\\n    ) public payable {\\n        numberOfCampaigns += 1;\\n        TogetherForCharityWithTarget newCampaign = new TogetherForCharityWithTarget(\\n                numberOfCampaigns,\\n                description,\\n                msg.sender,\\n                beneficiary,\\n                targetAmount,\\n                minimumAmount\\n            );\\n\\n        deployedCampaigns.push(address(newCampaign));\\n\\n        emit CampaignCreated(\\n            numberOfCampaigns,\\n            address(newCampaign),\\n            msg.sender,\\n            beneficiary,\\n            0 // Capaign With Target\\n        );\\n\\n        newCampaign.fundCampaign{value: msg.value}(msg.sender);\\n\\n        emit EthSentToCampaign(\\n            numberOfCampaigns,\\n            address(newCampaign),\\n            msg.value\\n        );\\n    }\\n\\n    function createCampaignWithTime(\\n        string memory description,\\n        address beneficiary,\\n        uint256 totalTime,\\n        uint256 minimumAmount\\n    ) public payable {\\n        numberOfCampaigns += 1;\\n        TogetherForCharityWithTime newCampaign = new TogetherForCharityWithTime(\\n            numberOfCampaigns,\\n            description,\\n            msg.sender,\\n            beneficiary,\\n            totalTime,\\n            minimumAmount\\n        );\\n\\n        deployedCampaigns.push(address(newCampaign));\\n\\n        emit CampaignCreated(\\n            numberOfCampaigns,\\n            address(newCampaign),\\n            msg.sender,\\n            beneficiary,\\n            1 // Capaign With Time\\n        );\\n\\n        newCampaign.fundCampaign{value: msg.value}(msg.sender);\\n\\n        emit EthSentToCampaign(\\n            numberOfCampaigns,\\n            address(newCampaign),\\n            msg.value\\n        );\\n    }\\n\\n    function createCampaignWithSteps(\\n        string memory description,\\n        address beneficiary,\\n        uint256 minimumAmount,\\n        uint256 targetAmount,\\n        uint16 steps,\\n        uint256 stepTimeInterval\\n    ) public payable {\\n        if (steps > 5) {\\n            revert TogetherForCharityContractFactory__TooManySteps();\\n        }\\n        numberOfCampaigns += 1;\\n        TogetherForCharityWithSteps newCampaign = new TogetherForCharityWithSteps(\\n                numberOfCampaigns,\\n                description,\\n                msg.sender,\\n                beneficiary,\\n                minimumAmount,\\n                targetAmount,\\n                steps,\\n                stepTimeInterval\\n            );\\n\\n        deployedCampaigns.push(address(newCampaign));\\n\\n        emit CampaignCreated(\\n            numberOfCampaigns,\\n            address(newCampaign),\\n            msg.sender,\\n            beneficiary,\\n            2 // Capaign With Steps\\n        );\\n\\n        newCampaign.fundCampaign{value: msg.value}(msg.sender);\\n\\n        emit EthSentToCampaign(\\n            numberOfCampaigns,\\n            address(newCampaign),\\n            msg.value\\n        );\\n    }\\n\\n    function getDeployedCampaigns() public view returns (address[] memory) {\\n        return deployedCampaigns;\\n    }\\n\\n    function getNumberOfCampaigns() public view returns (uint256) {\\n        return numberOfCampaigns;\\n    }\\n\\n    /* Events */\\n    event CampaignCreated(\\n        uint256 campaignID,\\n        address indexed campaignAddress,\\n        address indexed creator,\\n        address indexed beneficiary,\\n        uint8 campaignType\\n    );\\n\\n    event EthSentToCampaign(\\n        uint256 campaignID,\\n        address indexed campaignAddress,\\n        uint256 amount\\n    );\\n}\\n\",\"keccak256\":\"0x1f7b4733cd151bfccb27a54a50db550b29e099e343cdd2bad1179a4fd21879ea\",\"license\":\"MIT\"},\"contracts/TogetherForCharityWithSteps.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n/* Errors */\\nerror TogetherForCharityWithSteps__CampaignClosed(uint256);\\nerror TogetherForCharityWithSteps__CampaignOpen(uint256);\\nerror TogetherForCharityWithSteps__TooSmallDonation();\\nerror TogetherForCharityWithSteps__TransferFailed(address, uint256);\\nerror TogetherForCharityWithSteps__IsNotVoter(address);\\nerror TogetherForCharityWithSteps__VoteNotNeeded();\\nerror TogetherForCharityWithSteps__AlreadyVoted(address);\\nerror TogetherForCharityWithSteps__UpkeepNotNeeded();\\n\\ncontract TogetherForCharityWithSteps {\\n    /* Modifiers */\\n    modifier CampaignOpen() {\\n        if (state != CampaignState.OPEN) {\\n            // If the campaign is closed\\n            revert TogetherForCharityWithSteps__CampaignClosed(campaignID);\\n        }\\n        _;\\n    }\\n\\n    modifier CampaignClosed() {\\n        if (state != CampaignState.CLOSED) {\\n            // If the campaign is open\\n            revert TogetherForCharityWithSteps__CampaignOpen(campaignID);\\n        }\\n        _;\\n    }\\n\\n    modifier CanVote(address voter) {\\n        if (currentStep == 0) {\\n            revert TogetherForCharityWithSteps__VoteNotNeeded();\\n        } else {\\n            bool found = false;\\n\\n            for (uint256 i = 0; i < allowedVotersCurrentStep.length; i++) {\\n                if (allowedVotersCurrentStep[i] == voter) {\\n                    found = true;\\n                }\\n            }\\n            if (found == false) {\\n                revert TogetherForCharityWithSteps__IsNotVoter(voter);\\n            }\\n        }\\n        _;\\n    }\\n\\n    modifier NotAlreadyVoted(address voter) {\\n        if (\\n            (votes[currentStep][voter] == VoteType.TRUE) ||\\n            (votes[currentStep][voter] == VoteType.FALSE)\\n        ) {\\n            revert TogetherForCharityWithSteps__AlreadyVoted(voter);\\n        }\\n        _;\\n    }\\n\\n    /* Type declarations */\\n    enum CampaignState {\\n        OPEN,\\n        CLOSED\\n    }\\n\\n    enum VoteType {\\n        NOT_VOTED,\\n        TRUE,\\n        FALSE\\n    }\\n\\n    /* Campaign Variables */\\n    uint256 private campaignID;\\n    string private description;\\n    address private creator;\\n    CampaignState private state;\\n    address payable private beneficiary;\\n    address[] private funders;\\n    address[] private allowedVotersCurrentStep;\\n    address[] private allowedVotersNextStep;\\n    mapping(address => uint256) private fundersToAmount;\\n    mapping(uint16 => mapping(address => VoteType)) private votes; // For each step there is a mapping from the voter to the vote\\n    uint256 private totalFunded;\\n    uint256 private targetAmount;\\n    uint256 private createdTimestamp;\\n    uint256 private newStepTimestamp;\\n    uint256 private maxTime;\\n    uint16 private currentStep;\\n    uint16 private steps;\\n    uint256 private stepTimeInterval;\\n    uint256 private minimumDonation;\\n\\n    /* Constructor */\\n    constructor(\\n        uint256 _campaignID,\\n        string memory _description,\\n        address _creator,\\n        address _beneficiary,\\n        uint256 _minimumAmount,\\n        uint256 _targetAmount,\\n        uint16 _steps,\\n        uint256 _stepTimeInterval\\n    ) {\\n        campaignID = _campaignID;\\n        description = _description;\\n        creator = _creator;\\n        state = CampaignState.OPEN;\\n        beneficiary = payable(_beneficiary);\\n        totalFunded = 0;\\n        targetAmount = _targetAmount;\\n        createdTimestamp = block.timestamp;\\n        maxTime = 789 * (10 ** 4); // 3 month\\n        stepTimeInterval = _stepTimeInterval;\\n        minimumDonation = _minimumAmount;\\n        currentStep = 0;\\n        steps = _steps;\\n    }\\n\\n    /* Functions */\\n    function fundCampaign(address funder) public payable CampaignOpen {\\n        if (msg.value < minimumDonation) {\\n            revert TogetherForCharityWithSteps__TooSmallDonation();\\n        }\\n\\n        if (funder == address(0)) {\\n            if (fundersToAmount[msg.sender] == 0) {\\n                funders.push(msg.sender);\\n                fundersToAmount[msg.sender] = msg.value;\\n            } else {\\n                fundersToAmount[msg.sender] += msg.value;\\n            }\\n        } else {\\n            if (fundersToAmount[funder] == 0) {\\n                funders.push(funder);\\n                fundersToAmount[funder] = msg.value;\\n            } else {\\n                fundersToAmount[funder] += msg.value;\\n            }\\n        }\\n\\n        totalFunded += msg.value;\\n\\n        emit CampaignFunded(campaignID, msg.sender, msg.value);\\n\\n        if (totalFunded >= targetAmount) {\\n            state = CampaignState.CLOSED;\\n            deliverStep();\\n        }\\n    }\\n\\n    function deliverStep() internal CampaignClosed {\\n        uint256 amountToSend = address(this).balance / (steps - currentStep);\\n\\n        (bool success, ) = beneficiary.call{value: amountToSend}(\\\"\\\");\\n        if (!success) {\\n            revert TogetherForCharityWithSteps__TransferFailed(\\n                beneficiary,\\n                amountToSend\\n            );\\n        } else {\\n            emit StepDelivered(\\n                campaignID,\\n                beneficiary,\\n                amountToSend,\\n                currentStep + 1\\n            );\\n        }\\n\\n        if (currentStep == 0) {\\n            for (uint256 i = 0; i < funders.length; i++) {\\n                allowedVotersCurrentStep.push(funders[i]);\\n            }\\n        } else if (currentStep > 0) {\\n            for (uint256 i = 0; i < allowedVotersCurrentStep.length; i++) {\\n                if (\\n                    votes[currentStep][allowedVotersCurrentStep[i]] ==\\n                    VoteType.NOT_VOTED\\n                ) {\\n                    allowedVotersNextStep.push(allowedVotersCurrentStep[i]);\\n                }\\n            }\\n\\n            allowedVotersCurrentStep = new address[](0);\\n\\n            for (uint256 i = 0; i < allowedVotersNextStep.length; i++) {\\n                allowedVotersCurrentStep.push(allowedVotersNextStep[i]);\\n            }\\n\\n            allowedVotersNextStep = new address[](0);\\n        }\\n        currentStep++;\\n        newStepTimestamp = block.timestamp;\\n    }\\n\\n    function voteForNextStep(\\n        bool vote\\n    ) public CanVote(msg.sender) NotAlreadyVoted(msg.sender) CampaignClosed {\\n        if (vote == true) {\\n            votes[currentStep][msg.sender] = VoteType.TRUE;\\n            allowedVotersNextStep.push(msg.sender);\\n        } else if (vote == false) {\\n            votes[currentStep][msg.sender] = VoteType.FALSE;\\n            uint256 amountToSend = fundersToAmount[msg.sender] -\\n                ((fundersToAmount[msg.sender] / steps) * currentStep);\\n\\n            (bool success, ) = msg.sender.call{value: amountToSend}(\\\"\\\");\\n            if (!success) {\\n                revert TogetherForCharityWithSteps__TransferFailed(\\n                    msg.sender,\\n                    amountToSend\\n                );\\n            }\\n            fundersToAmount[msg.sender] -= amountToSend;\\n            totalFunded -= amountToSend;\\n            emit FunderRefunded(campaignID, msg.sender, amountToSend);\\n        }\\n    }\\n\\n    function checkUpkeep() public view returns (bool) {\\n        if (currentStep == 0) {\\n            bool timePassed = ((block.timestamp - createdTimestamp) > maxTime);\\n            bool isOpen = (CampaignState.OPEN == state);\\n\\n            return (timePassed && isOpen);\\n        } else if (currentStep > 0) {\\n            bool timePassed = ((block.timestamp - newStepTimestamp) >\\n                stepTimeInterval);\\n            bool isClosed = (CampaignState.CLOSED == state);\\n\\n            return (timePassed && isClosed);\\n        }\\n    }\\n\\n    function performUpkeep() public {\\n        bool upkeepNeeded = checkUpkeep();\\n\\n        if (!upkeepNeeded) {\\n            revert TogetherForCharityWithSteps__UpkeepNotNeeded();\\n        }\\n\\n        if (CampaignState.OPEN == state) {\\n            state = CampaignState.CLOSED;\\n        }\\n\\n        deliverStep();\\n    }\\n\\n    /* Events */\\n    event CampaignFunded(\\n        uint256 indexed campaignID,\\n        address indexed funder,\\n        uint256 amount\\n    );\\n    event StepDelivered(\\n        uint256 indexed campaignID,\\n        address indexed beneficiary,\\n        uint256 amount,\\n        uint16 step\\n    );\\n    event FunderRefunded(\\n        uint256 indexed campaignID,\\n        address indexed funder,\\n        uint256 amount\\n    );\\n\\n    function getCampaignID() public view returns (uint256) {\\n        return campaignID;\\n    }\\n\\n    function getDescription() public view returns (string memory) {\\n        return description;\\n    }\\n\\n    function getCreator() public view returns (address) {\\n        return creator;\\n    }\\n\\n    function getCampaignState() public view returns (string memory) {\\n        if (state == CampaignState.OPEN) {\\n            return \\\"Open\\\";\\n        } else {\\n            return \\\"Closed\\\";\\n        }\\n    }\\n\\n    function getBeneficiary() public view returns (address) {\\n        return beneficiary;\\n    }\\n\\n    function getFunders() public view returns (address[] memory) {\\n        return funders;\\n    }\\n\\n    function getAllowedVotersForCurrentStep()\\n        public\\n        view\\n        returns (address[] memory)\\n    {\\n        return allowedVotersCurrentStep;\\n    }\\n\\n    function getAllowedVotersForNextStep()\\n        public\\n        view\\n        returns (address[] memory)\\n    {\\n        return allowedVotersNextStep;\\n    }\\n\\n    function getAmountFundedFromFunder(\\n        address _funder\\n    ) public view returns (uint256) {\\n        return fundersToAmount[_funder];\\n    }\\n\\n    function getVoteForCurrentStep(\\n        uint16 _step,\\n        address _voter\\n    ) public view returns (VoteType) {\\n        return votes[_step][_voter];\\n    }\\n\\n    function getTotalAmountFunded() public view returns (uint256) {\\n        return totalFunded;\\n    }\\n\\n    function getTargetAmount() public view returns (uint256) {\\n        return targetAmount;\\n    }\\n\\n    function getTimestampOfCreation() public view returns (uint256) {\\n        return createdTimestamp;\\n    }\\n\\n    function getCurrentStepInitialTimestamp() public view returns (uint256) {\\n        return newStepTimestamp;\\n    }\\n\\n    function getMaxDurationTimeInSeconds() public view returns (uint256) {\\n        return maxTime;\\n    }\\n\\n    function getTotalSteps() public view returns (uint16) {\\n        return steps;\\n    }\\n\\n    function getCurrentStep() public view returns (uint16) {\\n        return currentStep;\\n    }\\n\\n    function getStepDurationInSeconds() public view returns (uint256) {\\n        return stepTimeInterval;\\n    }\\n\\n    function getMinimumDonation() public view returns (uint256) {\\n        return minimumDonation;\\n    }\\n\\n    function getCampaignAddress() public view returns (address) {\\n        return address(this);\\n    }\\n\\n    function getCampaignType() public pure returns (string memory) {\\n        return \\\"Steps\\\";\\n    }\\n}\\n\",\"keccak256\":\"0xe55e5532deea76fda0ef6a7c9c7170268458dd6d1c23b192028733ce037c2d3d\",\"license\":\"MIT\"},\"contracts/TogetherForCharityWithTarget.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n/* Errors */\\nerror TogetherForCharityWithTarget__TooSmallDonation();\\nerror TogetherForCharityWithTarget__CampaignClosed(uint256);\\nerror TogetherForCharityWithTarget__TransferFailed(address, uint256);\\nerror TogetherForCharityWithTarget__UpkeepNotNeeded();\\n\\ncontract TogetherForCharityWithTarget {\\n    /* Modifiers */\\n    modifier CampaignClosed() {\\n        if (state != CampaignState.OPEN) {\\n            // If the campaign is close\\n            revert TogetherForCharityWithTarget__CampaignClosed(campaignID);\\n        }\\n        _;\\n    }\\n\\n    /* Type declarations */\\n    enum CampaignState {\\n        OPEN,\\n        CLOSED\\n    }\\n\\n    /* Campaign Variables */\\n    uint256 private campaignID;\\n    string private description;\\n    address private creator;\\n    CampaignState private state;\\n    address payable private beneficiary;\\n    address[] private funders;\\n    mapping(address => uint256) private fundersToAmount;\\n    uint256 private totalFunded;\\n    uint256 private createdTimestamp;\\n    uint256 private maxTime;\\n    uint256 private targetAmount;\\n    uint256 private minimumDonation;\\n\\n    /* Constructor */\\n    constructor(\\n        uint256 _campaignID,\\n        string memory _description,\\n        address _creator,\\n        address _beneficiary,\\n        uint256 _targetAmount,\\n        uint256 _minimumAmount\\n    ) {\\n        campaignID = _campaignID;\\n        description = _description;\\n        creator = _creator;\\n        state = CampaignState.OPEN;\\n        beneficiary = payable(_beneficiary);\\n        totalFunded = 0;\\n        createdTimestamp = block.timestamp;\\n        maxTime = 789 * (10 ** 4); // 3 month\\n        targetAmount = _targetAmount;\\n        minimumDonation = _minimumAmount;\\n    }\\n\\n    /* Functions */\\n    function fundCampaign(address funder) public payable CampaignClosed {\\n        if (msg.value < minimumDonation) {\\n            revert TogetherForCharityWithTarget__TooSmallDonation();\\n        }\\n\\n        if (funder == address(0)) {\\n            if (fundersToAmount[msg.sender] == 0) {\\n                funders.push(msg.sender);\\n                fundersToAmount[msg.sender] = msg.value;\\n            } else {\\n                fundersToAmount[msg.sender] += msg.value;\\n            }\\n        } else {\\n            if (fundersToAmount[funder] == 0) {\\n                funders.push(funder);\\n                fundersToAmount[funder] = msg.value;\\n            } else {\\n                fundersToAmount[funder] += msg.value;\\n            }\\n        }\\n\\n        totalFunded += msg.value;\\n\\n        emit CampaignFunded(campaignID, msg.sender, msg.value);\\n\\n        if (totalFunded >= targetAmount) {\\n            deliverCampaign();\\n        }\\n    }\\n\\n    function deliverCampaign() internal CampaignClosed {\\n        (bool success, ) = beneficiary.call{value: address(this).balance}(\\\"\\\");\\n        if (!success) {\\n            revert TogetherForCharityWithTarget__TransferFailed(\\n                beneficiary,\\n                address(this).balance\\n            );\\n        }\\n\\n        state = CampaignState.CLOSED; // Campaign Closed\\n\\n        emit CampaignDelivered(campaignID, beneficiary, totalFunded);\\n    }\\n\\n    function checkUpkeep() public view returns (bool) {\\n        bool timePassed = ((block.timestamp - createdTimestamp) > maxTime);\\n        bool isOpen = (CampaignState.OPEN == state);\\n\\n        return (timePassed && isOpen);\\n    }\\n\\n    function performUpkeep() public {\\n        bool upkeepNeeded = checkUpkeep();\\n\\n        if (!upkeepNeeded) {\\n            revert TogetherForCharityWithTarget__UpkeepNotNeeded();\\n        }\\n\\n        for (uint256 i = 0; i < funders.length; i++) {\\n            (bool success, ) = funders[i].call{\\n                value: fundersToAmount[funders[i]]\\n            }(\\\"\\\");\\n            if (!success) {\\n                revert TogetherForCharityWithTarget__TransferFailed(\\n                    funders[i],\\n                    fundersToAmount[funders[i]]\\n                );\\n            }\\n        }\\n\\n        state = CampaignState.CLOSED; // Closing campaign\\n\\n        emit CampaignNotDelivered(campaignID, beneficiary);\\n    }\\n\\n    function getCampaignID() public view returns (uint256) {\\n        return campaignID;\\n    }\\n\\n    function getDescription() public view returns (string memory) {\\n        return description;\\n    }\\n\\n    function getCreator() public view returns (address) {\\n        return creator;\\n    }\\n\\n    function getCampaignState() public view returns (CampaignState) {\\n        return state;\\n    }\\n\\n    function getBeneficiary() public view returns (address) {\\n        return beneficiary;\\n    }\\n\\n    function getFunders() public view returns (address[] memory) {\\n        return funders;\\n    }\\n\\n    function getAmountFundedFromFunder(\\n        address _funder\\n    ) public view returns (uint256) {\\n        return fundersToAmount[_funder];\\n    }\\n\\n    function getTotalAmountFunded() public view returns (uint256) {\\n        return totalFunded;\\n    }\\n\\n    function getTargetAmount() public view returns (uint256) {\\n        return targetAmount;\\n    }\\n\\n    function getMinimumDonation() public view returns (uint256) {\\n        return minimumDonation;\\n    }\\n\\n    function getMaxCampaignDurationSeconds() public view returns (uint256) {\\n        return maxTime;\\n    }\\n\\n    function getCampaignAddress() public view returns (address) {\\n        return address(this);\\n    }\\n\\n    function getCampaignType() public pure returns (string memory) {\\n        return \\\"Target\\\";\\n    }\\n\\n    /* Events */\\n    event CampaignFunded(\\n        uint256 indexed campaignID,\\n        address indexed funder,\\n        uint256 amount\\n    );\\n    event CampaignDelivered(\\n        uint256 indexed campaignID,\\n        address indexed beneficiary,\\n        uint256 amount\\n    );\\n    event CampaignNotDelivered(\\n        uint256 indexed campaignID,\\n        address indexed beneficiary\\n    );\\n}\\n\",\"keccak256\":\"0xe141d1496cfcedfed3e5fb70481d51064a98ed900d52e8efff15d58d20165ece\",\"license\":\"MIT\"},\"contracts/TogetherForCharityWithTime.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n/* Errors */\\nerror TogetherForCharityWithTime__TooShortDuration();\\nerror TogetherForCharityWithTime__TooSmallDonation();\\nerror TogetherForCharityWithTime__CampaignClosed(uint256);\\nerror TogetherForCharityWithTime__TransferFailed();\\nerror TogetherForCharityWithTime__UpkeepNotNeeded();\\n\\ncontract TogetherForCharityWithTime {\\n    /* Modifiers */\\n    modifier CampaignClosed() {\\n        if (state != CampaignState.OPEN) {\\n            // If the campaign is close\\n            revert TogetherForCharityWithTime__CampaignClosed(campaignID);\\n        }\\n        _;\\n    }\\n\\n    /* Type declarations */\\n    enum CampaignState {\\n        OPEN,\\n        CLOSED\\n    }\\n\\n    /* Campaign Variables */\\n    uint256 private campaignID;\\n    string private description;\\n    address private creator;\\n    CampaignState private state;\\n    address payable private beneficiary;\\n    address[] private funders;\\n    mapping(address => uint256) private fundersToAmount;\\n    uint256 private totalFunded;\\n    uint256 private createdTimestamp;\\n    uint256 private totalTime;\\n    uint256 private minimumDonation;\\n\\n    /* Constructor */\\n    constructor(\\n        uint256 _campaignID,\\n        string memory _description,\\n        address _creator,\\n        address _beneficiary,\\n        uint256 _totalTime,\\n        uint256 _minimumAmount\\n    ) {\\n        campaignID = _campaignID;\\n        description = _description;\\n        creator = _creator;\\n        state = CampaignState.OPEN;\\n        beneficiary = payable(_beneficiary);\\n        totalFunded = 0;\\n        createdTimestamp = block.timestamp;\\n        totalTime = _totalTime;\\n        minimumDonation = _minimumAmount;\\n    }\\n\\n    /* Functions */\\n    function fundCampaign(address funder) public payable CampaignClosed {\\n        if (msg.value < minimumDonation) {\\n            revert TogetherForCharityWithTime__TooSmallDonation();\\n        }\\n\\n        if (funder == address(0)) {\\n            if (fundersToAmount[msg.sender] == 0) {\\n                funders.push(msg.sender);\\n                fundersToAmount[msg.sender] = msg.value;\\n            } else {\\n                fundersToAmount[msg.sender] += msg.value;\\n            }\\n        } else {\\n            if (fundersToAmount[funder] == 0) {\\n                funders.push(funder);\\n                fundersToAmount[funder] = msg.value;\\n            } else {\\n                fundersToAmount[funder] += msg.value;\\n            }\\n        }\\n\\n        totalFunded += msg.value;\\n\\n        emit CampaignFunded(campaignID, msg.sender, msg.value);\\n    }\\n\\n    function checkUpkeep() public view returns (bool) {\\n        bool timePassed = ((block.timestamp - createdTimestamp) > totalTime);\\n        bool isOpen = (CampaignState.OPEN == state);\\n\\n        return (timePassed && isOpen);\\n    }\\n\\n    function performUpkeep() public {\\n        bool upkeepNeeded = checkUpkeep();\\n\\n        if (!upkeepNeeded) {\\n            revert TogetherForCharityWithTime__UpkeepNotNeeded();\\n        }\\n\\n        (bool success, ) = beneficiary.call{value: address(this).balance}(\\\"\\\");\\n        if (!success) {\\n            revert TogetherForCharityWithTime__TransferFailed();\\n        }\\n\\n        state = CampaignState.CLOSED; // Closing campaign\\n\\n        emit CampaignDelivered(campaignID, beneficiary, totalFunded);\\n    }\\n\\n    function getCampaignID() public view returns (uint256) {\\n        return campaignID;\\n    }\\n\\n    function getDescription() public view returns (string memory) {\\n        return description;\\n    }\\n\\n    function getCreator() public view returns (address) {\\n        return creator;\\n    }\\n\\n    function getCampaignState() public view returns (CampaignState) {\\n        return state;\\n    }\\n\\n    function getBeneficiary() public view returns (address) {\\n        return beneficiary;\\n    }\\n\\n    function getFunders() public view returns (address[] memory) {\\n        return funders;\\n    }\\n\\n    function getAmountFundedFromFunder(\\n        address _funder\\n    ) public view returns (uint256) {\\n        return fundersToAmount[_funder];\\n    }\\n\\n    function getTotalAmountFunded() public view returns (uint256) {\\n        return totalFunded;\\n    }\\n\\n    function getCreationTimeStamp() public view returns (uint256) {\\n        return createdTimestamp;\\n    }\\n\\n    function getCampaignDurationSeconds() public view returns (uint256) {\\n        return totalTime;\\n    }\\n\\n    function getMinimumDonation() public view returns (uint256) {\\n        return minimumDonation;\\n    }\\n\\n    function getCampaignAddress() public view returns (address) {\\n        return address(this);\\n    }\\n\\n    function getCampaignType() public pure returns (string memory) {\\n        return \\\"Time\\\";\\n    }\\n\\n    /* Events */\\n    event CampaignFunded(\\n        uint256 indexed campaignID,\\n        address indexed funder,\\n        uint256 amount\\n    );\\n    event CampaignDelivered(\\n        uint256 indexed campaignID,\\n        address indexed beneficiary,\\n        uint256 amount\\n    );\\n}\\n\",\"keccak256\":\"0x654e4ef9b3752f686ba3f791039b93bed84ed176c3af2e5a4d7d82605e009cd3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040805160008082526020820192839052905161002e9290610039565b5060006001556100b3565b82805482825590600052602060002090810192821561008e579160200282015b8281111561008e57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190610059565b5061009a92915061009e565b5090565b5b8082111561009a576000815560010161009f565b613c67806100c26000396000f3fe608060405260043610620000505760003560e01c806342eaed3e146200005557806345c68778146200006e5780634acb9d4f146200008557806388656f3e14620000b5578063e4aafc2c14620000cc575b600080fd5b6200006c62000066366004620006a1565b620000ec565b005b6200006c6200007f3660046200072d565b620002b8565b3480156200009257600080fd5b506200009d62000458565b604051620000ac919062000790565b60405180910390f35b6200006c620000c63660046200072d565b620004bc565b348015620000d957600080fd5b50600154604051908152602001620000ac565b60058261ffff1611156200011357604051637360fdf760e11b815260040160405180910390fd5b6001806000828254620001279190620007df565b925050819055506000600154873388888888886040516200014890620005af565b6200015b9897969594939291906200084f565b604051809103906000f08015801562000178573d6000803e3d6000fd5b5060008054600180820183559180527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160a01b0319166001600160a01b0384811691821790925591546040805191825260026020830152939450908916923392917fd7a876baca6afbf5fa6e9a8caa3fdf82486a2e004e04f0031774004eec486970910160405180910390a460405163334138bf60e11b81523360048201526001600160a01b03821690636682717e9034906024016000604051808303818588803b1580156200024e57600080fd5b505af115801562000263573d6000803e3d6000fd5b5050600154604080519182523460208301526001600160a01b03861694507fc253f5abb69e38f225daa366045a23a2bf233aa243be30c7baef3a32636440cb935001905060405180910390a250505050505050565b6001806000828254620002cc9190620007df565b9250508190555060006001548533868686604051620002eb90620005bd565b620002fc96959493929190620008ab565b604051809103906000f08015801562000319573d6000803e3d6000fd5b5060008054600180820183559180527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160a01b0319166001600160a01b0384811691821790925582546040805191825260208201949094529394509087169233927fd7a876baca6afbf5fa6e9a8caa3fdf82486a2e004e04f0031774004eec48697091015b60405180910390a460405163334138bf60e11b81523360048201526001600160a01b03821690636682717e9034906024016000604051808303818588803b158015620003f057600080fd5b505af115801562000405573d6000803e3d6000fd5b5050600154604080519182523460208301526001600160a01b03861694507fc253f5abb69e38f225daa366045a23a2bf233aa243be30c7baef3a32636440cb935001905060405180910390a25050505050565b60606000805480602002602001604051908101604052809291908181526020018280548015620004b257602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000493575b5050505050905090565b6001806000828254620004d09190620007df565b9250508190555060006001548533868686604051620004ef90620005cb565b6200050096959493929190620008ab565b604051809103906000f0801580156200051d573d6000803e3d6000fd5b5060008054600180820183558280527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56390910180546001600160a01b0319166001600160a01b03858116918217909255915460408051918252602082019490945293945087169233927fd7a876baca6afbf5fa6e9a8caa3fdf82486a2e004e04f0031774004eec4869709101620003a5565b61184880620008f583390190565b610c4a806200213d83390190565b610eab8062002d8783390190565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200060157600080fd5b813567ffffffffffffffff808211156200061f576200061f620005d9565b604051601f8301601f19908116603f011681019082821181831017156200064a576200064a620005d9565b816040528381528660208588010111156200066457600080fd5b836020870160208301376000602085830101528094505050505092915050565b80356001600160a01b03811681146200069c57600080fd5b919050565b60008060008060008060c08789031215620006bb57600080fd5b863567ffffffffffffffff811115620006d357600080fd5b620006e189828a01620005ef565b965050620006f26020880162000684565b94506040870135935060608701359250608087013561ffff811681146200071857600080fd5b8092505060a087013590509295509295509295565b600080600080608085870312156200074457600080fd5b843567ffffffffffffffff8111156200075c57600080fd5b6200076a87828801620005ef565b9450506200077b6020860162000684565b93969395505050506040820135916060013590565b6020808252825182820181905260009190848201906040850190845b81811015620007d35783516001600160a01b031683529284019291840191600101620007ac565b50909695505050505050565b808201808211156200080157634e487b7160e01b600052601160045260246000fd5b92915050565b6000815180845260005b818110156200082f5760208185018101518683018201520162000811565b506000602082860101526020601f19601f83011685010191505092915050565b60006101008a83528060208401526200086b8184018b62000807565b6001600160a01b03998a16604085015297909816606083015250608081019490945260a084019290925261ffff1660c083015260e0909101529392505050565b86815260c060208201526000620008c660c083018862000807565b6001600160a01b039687166040840152949095166060820152608081019290925260a090910152939250505056fe60806040523480156200001157600080fd5b506040516200184838038062001848833981016040819052620000349162000109565b60008890556001620000478882620002cd565b50600280546001600160a81b0319166001600160a01b0397881617905560038054959096166001600160a01b031995909516949094179094556000600955600a5542600b5562786450600d55600f91909155601055600e805461ffff909216620100000263ffffffff1990921691909117905550620003999050565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620000f157600080fd5b919050565b805161ffff81168114620000f157600080fd5b600080600080600080600080610100898b0312156200012757600080fd5b88516020808b0151919950906001600160401b03808211156200014957600080fd5b818c0191508c601f8301126200015e57600080fd5b815181811115620001735762000173620000c3565b604051601f8201601f19908116603f011681019083821181831017156200019e576200019e620000c3565b816040528281528f86848701011115620001b757600080fd5b600093505b82841015620001db5784840186015181850187015292850192620001bc565b6000868483010152809c50505050505050620001fa60408a01620000d9565b95506200020a60608a01620000d9565b94506080890151935060a089015192506200022860c08a01620000f6565b915060e089015190509295985092959890939650565b600181811c908216806200025357607f821691505b6020821081036200027457634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002c857600081815260208120601f850160051c81016020861015620002a35750805b601f850160051c820191505b81811015620002c457828155600101620002af565b5050505b505050565b81516001600160401b03811115620002e957620002e9620000c3565b6200030181620002fa84546200023e565b846200027a565b602080601f831160018114620003395760008415620003205750858301515b600019600386901b1c1916600185901b178555620002c4565b600085815260208120601f198616915b828110156200036a5788860151825594840194600190910190840162000349565b5085821015620003895787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61149f80620003a96000396000f3fe6080604052600436106101665760003560e01c80636682717e116100d1578063a13abdad1161008a578063d76a993611610064578063d76a9936146103da578063ea63a044146103ef578063f19d27f414610404578063fdff62501461041957600080fd5b8063a13abdad1461038d578063a16bfca8146103b2578063acfb8757146103c757600080fd5b80636682717e146103115780636e11a0a7146103245780636e4d243a146103395780637fb3761e1461034e57806389c9836d1461036357806391ac4b881461037857600080fd5b806336a8fafe1161012357806336a8fafe1461023f57806338f0b35414610261578063471ccb2d14610276578063565a2e2c146102985780635822822d146102b65780635b588ac6146102e357600080fd5b806302405ef21461016b5780630ee2cb101461018f5780631a092541146101c15780631d3824ea146101e357806329ab62ae1461020b5780632aa7046914610220575b600080fd5b34801561017757600080fd5b506000545b6040519081526020015b60405180910390f35b34801561019b57600080fd5b506002546001600160a01b03165b6040516001600160a01b039091168152602001610186565b3480156101cd57600080fd5b506101d661044f565b60405161018691906111b8565b3480156101ef57600080fd5b50600e5461ffff165b60405161ffff9091168152602001610186565b34801561021757600080fd5b50600c5461017c565b34801561022c57600080fd5b50600e5462010000900461ffff166101f8565b34801561024b57600080fd5b506102546104e1565b6040516101869190611206565b34801561026d57600080fd5b50600f5461017c565b34801561028257600080fd5b50610296610291366004611253565b610542565b005b3480156102a457600080fd5b506003546001600160a01b03166101a9565b3480156102c257600080fd5b506102d66102d1366004611298565b6108db565b60405161018691906112ea565b3480156102ef57600080fd5b50604080518082019091526005815264537465707360d81b60208201526101d6565b61029661031f366004611312565b61090d565b34801561033057600080fd5b5060095461017c565b34801561034557600080fd5b50610296610b45565b34801561035a57600080fd5b506101d6610bb6565b34801561036f57600080fd5b50600b5461017c565b34801561038457600080fd5b50600a5461017c565b34801561039957600080fd5b506103a2610c20565b6040519015158152602001610186565b3480156103be57600080fd5b50610254610ccc565b3480156103d357600080fd5b50306101a9565b3480156103e657600080fd5b5060105461017c565b3480156103fb57600080fd5b50610254610d2c565b34801561041057600080fd5b50600d5461017c565b34801561042557600080fd5b5061017c610434366004611312565b6001600160a01b031660009081526007602052604090205490565b60606001805461045e9061132d565b80601f016020809104026020016040519081016040528092919081815260200182805461048a9061132d565b80156104d75780601f106104ac576101008083540402835291602001916104d7565b820191906000526020600020905b8154815290600101906020018083116104ba57829003601f168201915b5050505050905090565b606060068054806020026020016040519081016040528092919081815260200182805480156104d757602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161051b575050505050905090565b600e54339061ffff1660000361056b57604051633df9f55160e01b815260040160405180910390fd5b6000805b6005548110156105c757826001600160a01b03166005828154811061059657610596611367565b6000918252602090912001546001600160a01b0316036105b557600191505b806105bf81611393565b91505061056f565b508015156000036105fb5760405163b322caab60e01b81526001600160a01b03831660048201526024015b60405180910390fd5b50600e5461ffff1660009081526008602090815260408083203380855292529091205460019060ff166002811115610635576106356112d4565b148061067e57506002600e5461ffff1660009081526008602090815260408083206001600160a01b038616845290915290205460ff16600281111561067c5761067c6112d4565b145b156106a75760405163f38b013760e01b81526001600160a01b03821660048201526024016105f2565b6001600254600160a01b900460ff1660018111156106c7576106c76112d4565b146106eb576000546040516329a0cca360e21b81526004016105f291815260200190565b821515600103610769575050600e5461ffff1660009081526008602090815260408083203380855292528220805460ff191660019081179091556006805491820181559092527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f90910180546001600160a01b031916909117905550565b8215156000036108d657600e805461ffff90811660009081526008602090815260408083203384528252808320805460ff1916600217905593546007909152928120549092808316926107c4926201000090920416906113ac565b6107ce91906113ce565b336000908152600760205260409020546107e891906113e5565b604051909150600090339083908381818185875af1925050503d806000811461082d576040519150601f19603f3d011682016040523d82523d6000602084013e610832565b606091505b505090508061085d5760405163696aace560e11b8152336004820152602481018390526044016105f2565b336000908152600760205260408120805484929061087c9084906113e5565b92505081905550816009600082825461089591906113e5565b90915550506000546040518381523391907f897b9900c9aa32f244fe8e6fd6f7ee74fc5cb1628aa707611c8a02e1b7a417df9060200160405180910390a350505b505050565b61ffff821660009081526008602090815260408083206001600160a01b038516845290915290205460ff165b92915050565b6000600254600160a01b900460ff16600181111561092d5761092d6112d4565b146109515760005460405163701de89960e11b81526004016105f291815260200190565b6010543410156109745760405163fbb23a7f60e01b815260040160405180910390fd5b6001600160a01b038116610a18573360009081526007602052604081205490036109ee5760048054600181019091557f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b031916339081179091556000908152600760205260409020349055610ac4565b3360009081526007602052604081208054349290610a0d9084906113f8565b90915550610ac49050565b6001600160a01b0381166000908152600760205260408120549003610a965760048054600181019091557f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b0319166001600160a01b0383169081179091556000908152600760205260409020349055610ac4565b6001600160a01b03811660009081526007602052604081208054349290610abe9084906113f8565b90915550505b3460096000828254610ad691906113f8565b90915550506000546040513481523391907f8a488dc8cd2ade9e472d438b05d4ca99d4b6eb64c602e26a33888999bcdc7df39060200160405180910390a3600a5460095410610b4257600280546001919060ff60a01b1916600160a01b835b0217905550610b42610d8c565b50565b6000610b4f610c20565b905080610b6f5760405163632ca04360e11b815260040160405180910390fd5b600254600160a01b900460ff166001811115610b8d57610b8d6112d4565b600003610bae57600280546001919060ff60a01b1916600160a01b83610b35565b610b42610d8c565b60606000600254600160a01b900460ff166001811115610bd857610bd86112d4565b03610bfc575060408051808201909152600481526327b832b760e11b602082015290565b5060408051808201909152600681526510db1bdcd95960d21b602082015290565b90565b600e5460009061ffff168103610c80576000600d54600b5442610c4391906113e5565b1190506000600260149054906101000a900460ff166001811115610c6957610c696112d4565b60005b149050818015610c795750805b9250505090565b600e5461ffff1615610c1d576000600f54600c5442610c9f91906113e5565b1190506000600260149054906101000a900460ff166001811115610cc557610cc56112d4565b6001610c6c565b606060058054806020026020016040519081016040528092919081815260200182805480156104d7576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161051b575050505050905090565b606060048054806020026020016040519081016040528092919081815260200182805480156104d7576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161051b575050505050905090565b6001600254600160a01b900460ff166001811115610dac57610dac6112d4565b14610dd0576000546040516329a0cca360e21b81526004016105f291815260200190565b600e54600090610ded9061ffff808216916201000090041661140b565b610dfb9061ffff16476113ac565b6003546040519192506000916001600160a01b039091169083908381818185875af1925050503d8060008114610e4d576040519150601f19603f3d011682016040523d82523d6000602084013e610e52565b606091505b5050905080610e8a5760035460405163696aace560e11b81526001600160a01b039091166004820152602481018390526044016105f2565b600354600054600e546001600160a01b03909216917f2e743b08da905bd7ac7fa0a1f63e17c7a460e026ed0397cea85e6d7e7a7928b4908590610ed29061ffff16600161142d565b6040805192835261ffff90911660208301520160405180910390a3600e5461ffff16600003610f705760005b600454811015610f6a57600560048281548110610f1d57610f1d611367565b60009182526020808320909101548354600181018555938352912090910180546001600160a01b0319166001600160a01b0390921691909117905580610f6281611393565b915050610efe565b50611104565b600e5461ffff16156111045760005b60055481101561105657600e5461ffff1660009081526008602052604081206005805483919085908110610fb557610fb5611367565b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff166002811115610fee57610fee6112d4565b036110445760066005828154811061100857611008611367565b60009182526020808320909101548354600181018555938352912090910180546001600160a01b0319166001600160a01b039092169190911790555b8061104e81611393565b915050610f7f565b5060408051600081526020810191829052516110749160059161113e565b5060005b6006548110156110e45760056006828154811061109757611097611367565b60009182526020808320909101548354600181018555938352912090910180546001600160a01b0319166001600160a01b03909216919091179055806110dc81611393565b915050611078565b5060408051600081526020810191829052516111029160069161113e565b505b600e805461ffff1690600061111883611448565b91906101000a81548161ffff021916908361ffff1602179055505042600c819055505050565b828054828255906000526020600020908101928215611193579160200282015b8281111561119357825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061115e565b5061119f9291506111a3565b5090565b5b8082111561119f57600081556001016111a4565b600060208083528351808285015260005b818110156111e5578581018301518582016040015282016111c9565b506000604082860101526040601f19601f8301168501019250505092915050565b6020808252825182820181905260009190848201906040850190845b818110156112475783516001600160a01b031683529284019291840191600101611222565b50909695505050505050565b60006020828403121561126557600080fd5b8135801515811461127557600080fd5b9392505050565b80356001600160a01b038116811461129357600080fd5b919050565b600080604083850312156112ab57600080fd5b823561ffff811681146112bd57600080fd5b91506112cb6020840161127c565b90509250929050565b634e487b7160e01b600052602160045260246000fd5b602081016003831061130c57634e487b7160e01b600052602160045260246000fd5b91905290565b60006020828403121561132457600080fd5b6112758261127c565b600181811c9082168061134157607f821691505b60208210810361136157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016113a5576113a561137d565b5060010190565b6000826113c957634e487b7160e01b600052601260045260246000fd5b500490565b80820281158282048414176109075761090761137d565b818103818111156109075761090761137d565b808201808211156109075761090761137d565b61ffff8281168282160390808211156114265761142661137d565b5092915050565b61ffff8181168382160190808211156114265761142661137d565b600061ffff80831681810361145f5761145f61137d565b600101939250505056fea26469706673582212202e6c44540501952bfdacb644777c25e518c603ac9cfa8aff4f9863c5328d112f64736f6c6343000814003360806040523480156200001157600080fd5b5060405162000c4a38038062000c4a8339810160408190526200003491620000cd565b6000869055600162000047868262000273565b50600280546001600160a01b039586166001600160a81b0319909116179055600380546001600160a01b0319169390941692909217909255600060065542600755600891909155600955506200033f9050565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620000c857600080fd5b919050565b60008060008060008060c08789031215620000e757600080fd5b8651602080890151919750906001600160401b03808211156200010957600080fd5b818a0191508a601f8301126200011e57600080fd5b8151818111156200013357620001336200009a565b604051601f8201601f19908116603f011681019083821181831017156200015e576200015e6200009a565b816040528281528d868487010111156200017757600080fd5b600093505b828410156200019b57848401860151818501870152928501926200017c565b6000868483010152809a50505050505050620001ba60408801620000b0565b9350620001ca60608801620000b0565b92506080870151915060a087015190509295509295509295565b600181811c90821680620001f957607f821691505b6020821081036200021a57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200026e57600081815260208120601f850160051c81016020861015620002495750805b601f850160051c820191505b818110156200026a5782815560010162000255565b5050505b505050565b81516001600160401b038111156200028f576200028f6200009a565b620002a781620002a08454620001e4565b8462000220565b602080601f831160018114620002df5760008415620002c65750858301515b600019600386901b1c1916600185901b1785556200026a565b600085815260208120601f198616915b828110156200031057888601518255948401946001909101908401620002ef565b50858210156200032f5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6108fb806200034f6000396000f3fe6080604052600436106100f35760003560e01c80637fb3761e1161008a578063d76a993611610059578063d76a99361461026e578063ea63a04414610283578063fca55c8a146102a5578063fdff6250146102ba57600080fd5b80637fb3761e146101fa578063a13abdad14610221578063acfb875714610246578063bbe303d01461025957600080fd5b80635b588ac6116100c65780635b588ac61461018e5780636682717e146101bb5780636e11a0a7146101d05780636e4d243a146101e557600080fd5b806302405ef2146100f85780630ee2cb101461011c5780631a0925411461014e578063565a2e2c14610170575b600080fd5b34801561010457600080fd5b506000545b6040519081526020015b60405180910390f35b34801561012857600080fd5b506002546001600160a01b03165b6040516001600160a01b039091168152602001610113565b34801561015a57600080fd5b506101636102f0565b6040516101139190610740565b34801561017c57600080fd5b506003546001600160a01b0316610136565b34801561019a57600080fd5b5060408051808201909152600481526354696d6560e01b6020820152610163565b6101ce6101c936600461078e565b610382565b005b3480156101dc57600080fd5b50600654610109565b3480156101f157600080fd5b506101ce610595565b34801561020657600080fd5b50600254600160a01b900460ff1660405161011391906107d4565b34801561022d57600080fd5b50610236610691565b6040519015158152602001610113565b34801561025257600080fd5b5030610136565b34801561026557600080fd5b50600854610109565b34801561027a57600080fd5b50600954610109565b34801561028f57600080fd5b506102986106df565b60405161011391906107fc565b3480156102b157600080fd5b50600754610109565b3480156102c657600080fd5b506101096102d536600461078e565b6001600160a01b031660009081526005602052604090205490565b6060600180546102ff90610849565b80601f016020809104026020016040519081016040528092919081815260200182805461032b90610849565b80156103785780601f1061034d57610100808354040283529160200191610378565b820191906000526020600020905b81548152906001019060200180831161035b57829003601f168201915b5050505050905090565b6000600254600160a01b900460ff1660018111156103a2576103a26107be565b146103cf57600054604051634c9a5a5960e01b81526004016103c691815260200190565b60405180910390fd5b6009543410156103f2576040516316abf07b60e21b815260040160405180910390fd5b6001600160a01b0381166104965733600090815260056020526040812054900361046c5760048054600181019091557f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b031916339081179091556000908152600560205260409020349055610542565b336000908152600560205260408120805434929061048b908490610899565b909155506105429050565b6001600160a01b03811660009081526005602052604081205490036105145760048054600181019091557f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b0319166001600160a01b0383169081179091556000908152600560205260409020349055610542565b6001600160a01b0381166000908152600560205260408120805434929061053c908490610899565b90915550505b34600660008282546105549190610899565b90915550506000546040513481523391907f8a488dc8cd2ade9e472d438b05d4ca99d4b6eb64c602e26a33888999bcdc7df39060200160405180910390a350565b600061059f610691565b9050806105bf57604051636d7af1f960e11b815260040160405180910390fd5b6003546040516000916001600160a01b03169047908381818185875af1925050503d806000811461060c576040519150601f19603f3d011682016040523d82523d6000602084013e610611565b606091505b5050905080610633576040516321b12cc360e11b815260040160405180910390fd5b6002805460ff60a01b1916600160a01b17905560035460005460065460408051918252516001600160a01b03909316927f01a71bd9aa6dc3be63731106cb3d0b8b6d5c38e3f8936ba655827d5d6daa17cc9181900360200190a35050565b600080600854600754426106a591906108b2565b1190506000600260149054906101000a900460ff1660018111156106cb576106cb6107be565b1590508180156106d85750805b9250505090565b6060600480548060200260200160405190810160405280929190818152602001828054801561037857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610719575050505050905090565b600060208083528351808285015260005b8181101561076d57858101830151858201604001528201610751565b506000604082860101526040601f19601f8301168501019250505092915050565b6000602082840312156107a057600080fd5b81356001600160a01b03811681146107b757600080fd5b9392505050565b634e487b7160e01b600052602160045260246000fd5b60208101600283106107f657634e487b7160e01b600052602160045260246000fd5b91905290565b6020808252825182820181905260009190848201906040850190845b8181101561083d5783516001600160a01b031683529284019291840191600101610818565b50909695505050505050565b600181811c9082168061085d57607f821691505b60208210810361087d57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156108ac576108ac610883565b92915050565b818103818111156108ac576108ac61088356fea26469706673582212201c2b869a02501d1960e6c81f4488143929977f78af5678162e6e7bf7c87ff0c664736f6c6343000814003360806040523480156200001157600080fd5b5060405162000eab38038062000eab8339810160408190526200003491620000d4565b600086905560016200004786826200027a565b50600280546001600160a01b039586166001600160a81b0319909116179055600380546001600160a01b031916939094169290921790925560006006554260075562786450600855600991909155600a5550620003469050565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620000cf57600080fd5b919050565b60008060008060008060c08789031215620000ee57600080fd5b8651602080890151919750906001600160401b03808211156200011057600080fd5b818a0191508a601f8301126200012557600080fd5b8151818111156200013a576200013a620000a1565b604051601f8201601f19908116603f01168101908382118183101715620001655762000165620000a1565b816040528281528d868487010111156200017e57600080fd5b600093505b82841015620001a2578484018601518185018701529285019262000183565b6000868483010152809a50505050505050620001c160408801620000b7565b9350620001d160608801620000b7565b92506080870151915060a087015190509295509295509295565b600181811c908216806200020057607f821691505b6020821081036200022157634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200027557600081815260208120601f850160051c81016020861015620002505750805b601f850160051c820191505b8181101562000271578281556001016200025c565b5050505b505050565b81516001600160401b03811115620002965762000296620000a1565b620002ae81620002a78454620001eb565b8462000227565b602080601f831160018114620002e65760008415620002cd5750858301515b600019600386901b1c1916600185901b17855562000271565b600085815260208120601f198616915b828110156200031757888601518255948401946001909101908401620002f6565b5085821015620003365787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b610b5580620003566000396000f3fe6080604052600436106100f35760003560e01c80636e4d243a1161008a578063acfb875711610059578063acfb875714610272578063d76a993614610285578063ea63a0441461029a578063fdff6250146102bc57600080fd5b80636e4d243a146101fc5780637fb3761e1461021157806391ac4b8814610238578063a13abdad1461024d57600080fd5b8063565a2e2c116100c6578063565a2e2c146101855780635b588ac6146101a35780636682717e146101d25780636e11a0a7146101e757600080fd5b806302405ef2146100f85780630ee2cb101461011c578063183aaf5d1461014e5780631a09254114610163575b600080fd5b34801561010457600080fd5b506000545b6040519081526020015b60405180910390f35b34801561012857600080fd5b506002546001600160a01b03165b6040516001600160a01b039091168152602001610113565b34801561015a57600080fd5b50600854610109565b34801561016f57600080fd5b506101786102f2565b604051610113919061096b565b34801561019157600080fd5b506003546001600160a01b0316610136565b3480156101af57600080fd5b5060408051808201909152600681526515185c99d95d60d21b6020820152610178565b6101e56101e03660046109b9565b610384565b005b3480156101f357600080fd5b50600654610109565b34801561020857600080fd5b506101e56105aa565b34801561021d57600080fd5b50600254600160a01b900460ff1660405161011391906109ff565b34801561024457600080fd5b50600954610109565b34801561025957600080fd5b50610262610792565b6040519015158152602001610113565b34801561027e57600080fd5b5030610136565b34801561029157600080fd5b50600a54610109565b3480156102a657600080fd5b506102af6107e0565b6040516101139190610a27565b3480156102c857600080fd5b506101096102d73660046109b9565b6001600160a01b031660009081526005602052604090205490565b60606001805461030190610a74565b80601f016020809104026020016040519081016040528092919081815260200182805461032d90610a74565b801561037a5780601f1061034f5761010080835404028352916020019161037a565b820191906000526020600020905b81548152906001019060200180831161035d57829003601f168201915b5050505050905090565b6000600254600160a01b900460ff1660018111156103a4576103a46109e9565b146103d1576000546040516324bd8b0760e21b81526004016103c891815260200190565b60405180910390fd5b600a543410156103f457604051631de47b3960e31b815260040160405180910390fd5b6001600160a01b0381166104985733600090815260056020526040812054900361046e5760048054600181019091557f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b031916339081179091556000908152600560205260409020349055610544565b336000908152600560205260408120805434929061048d908490610ac4565b909155506105449050565b6001600160a01b03811660009081526005602052604081205490036105165760048054600181019091557f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b0319166001600160a01b0383169081179091556000908152600560205260409020349055610544565b6001600160a01b0381166000908152600560205260408120805434929061053e908490610ac4565b90915550505b34600660008282546105569190610ac4565b90915550506000546040513481523391907f8a488dc8cd2ade9e472d438b05d4ca99d4b6eb64c602e26a33888999bcdc7df39060200160405180910390a3600954600654106105a7576105a7610841565b50565b60006105b4610792565b9050806105d45760405163b9f1e15560e01b815260040160405180910390fd5b60005b600454811015610740576000600482815481106105f6576105f6610add565b6000918252602082200154600480546001600160a01b03909216926005929091908690811061062757610627610add565b6000918252602080832091909101546001600160a01b0316835282019290925260409081018220549051909181818185875af1925050503d806000811461068a576040519150601f19603f3d011682016040523d82523d6000602084013e61068f565b606091505b505090508061072d57600482815481106106ab576106ab610add565b9060005260206000200160009054906101000a90046001600160a01b031660056000600485815481106106e0576106e0610add565b6000918252602080832091909101546001600160a01b039081168452908301939093526040918201902054905163e53fc13560e01b815292909116600483015260248201526044016103c8565b508061073881610af3565b9150506105d7565b506002805460ff60a01b1916600160a01b179055600354600080546040516001600160a01b039093169290917f83f69802d13dad76fe7004f9c4d92d57e09d7dbcd505db3c2d3b427842acc48c91a350565b600080600854600754426107a69190610b0c565b1190506000600260149054906101000a900460ff1660018111156107cc576107cc6109e9565b1590508180156107d95750805b9250505090565b6060600480548060200260200160405190810160405280929190818152602001828054801561037a57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161081a575050505050905090565b6000600254600160a01b900460ff166001811115610861576108616109e9565b14610885576000546040516324bd8b0760e21b81526004016103c891815260200190565b6003546040516000916001600160a01b03169047908381818185875af1925050503d80600081146108d2576040519150601f19603f3d011682016040523d82523d6000602084013e6108d7565b606091505b505090508061090e5760035460405163e53fc13560e01b81526001600160a01b0390911660048201524760248201526044016103c8565b6002805460ff60a01b1916600160a01b17905560035460005460065460408051918252516001600160a01b03909316927f01a71bd9aa6dc3be63731106cb3d0b8b6d5c38e3f8936ba655827d5d6daa17cc9181900360200190a350565b600060208083528351808285015260005b818110156109985785810183015185820160400152820161097c565b506000604082860101526040601f19601f8301168501019250505092915050565b6000602082840312156109cb57600080fd5b81356001600160a01b03811681146109e257600080fd5b9392505050565b634e487b7160e01b600052602160045260246000fd5b6020810160028310610a2157634e487b7160e01b600052602160045260246000fd5b91905290565b6020808252825182820181905260009190848201906040850190845b81811015610a685783516001600160a01b031683529284019291840191600101610a43565b50909695505050505050565b600181811c90821680610a8857607f821691505b602082108103610aa857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610ad757610ad7610aae565b92915050565b634e487b7160e01b600052603260045260246000fd5b600060018201610b0557610b05610aae565b5060010190565b81810381811115610ad757610ad7610aae56fea26469706673582212206b87a22c4e4140c67829f175619aaab7ddf607593fdb7ac9ce3cf53edf44eccf64736f6c63430008140033a2646970667358221220bb86ce95757ab893f9b86738152cf2f8c195f4000ffb76862f75db88112a1e5b64736f6c63430008140033",
  "deployedBytecode": "0x608060405260043610620000505760003560e01c806342eaed3e146200005557806345c68778146200006e5780634acb9d4f146200008557806388656f3e14620000b5578063e4aafc2c14620000cc575b600080fd5b6200006c62000066366004620006a1565b620000ec565b005b6200006c6200007f3660046200072d565b620002b8565b3480156200009257600080fd5b506200009d62000458565b604051620000ac919062000790565b60405180910390f35b6200006c620000c63660046200072d565b620004bc565b348015620000d957600080fd5b50600154604051908152602001620000ac565b60058261ffff1611156200011357604051637360fdf760e11b815260040160405180910390fd5b6001806000828254620001279190620007df565b925050819055506000600154873388888888886040516200014890620005af565b6200015b9897969594939291906200084f565b604051809103906000f08015801562000178573d6000803e3d6000fd5b5060008054600180820183559180527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160a01b0319166001600160a01b0384811691821790925591546040805191825260026020830152939450908916923392917fd7a876baca6afbf5fa6e9a8caa3fdf82486a2e004e04f0031774004eec486970910160405180910390a460405163334138bf60e11b81523360048201526001600160a01b03821690636682717e9034906024016000604051808303818588803b1580156200024e57600080fd5b505af115801562000263573d6000803e3d6000fd5b5050600154604080519182523460208301526001600160a01b03861694507fc253f5abb69e38f225daa366045a23a2bf233aa243be30c7baef3a32636440cb935001905060405180910390a250505050505050565b6001806000828254620002cc9190620007df565b9250508190555060006001548533868686604051620002eb90620005bd565b620002fc96959493929190620008ab565b604051809103906000f08015801562000319573d6000803e3d6000fd5b5060008054600180820183559180527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160a01b0319166001600160a01b0384811691821790925582546040805191825260208201949094529394509087169233927fd7a876baca6afbf5fa6e9a8caa3fdf82486a2e004e04f0031774004eec48697091015b60405180910390a460405163334138bf60e11b81523360048201526001600160a01b03821690636682717e9034906024016000604051808303818588803b158015620003f057600080fd5b505af115801562000405573d6000803e3d6000fd5b5050600154604080519182523460208301526001600160a01b03861694507fc253f5abb69e38f225daa366045a23a2bf233aa243be30c7baef3a32636440cb935001905060405180910390a25050505050565b60606000805480602002602001604051908101604052809291908181526020018280548015620004b257602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000493575b5050505050905090565b6001806000828254620004d09190620007df565b9250508190555060006001548533868686604051620004ef90620005cb565b6200050096959493929190620008ab565b604051809103906000f0801580156200051d573d6000803e3d6000fd5b5060008054600180820183558280527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56390910180546001600160a01b0319166001600160a01b03858116918217909255915460408051918252602082019490945293945087169233927fd7a876baca6afbf5fa6e9a8caa3fdf82486a2e004e04f0031774004eec4869709101620003a5565b61184880620008f583390190565b610c4a806200213d83390190565b610eab8062002d8783390190565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200060157600080fd5b813567ffffffffffffffff808211156200061f576200061f620005d9565b604051601f8301601f19908116603f011681019082821181831017156200064a576200064a620005d9565b816040528381528660208588010111156200066457600080fd5b836020870160208301376000602085830101528094505050505092915050565b80356001600160a01b03811681146200069c57600080fd5b919050565b60008060008060008060c08789031215620006bb57600080fd5b863567ffffffffffffffff811115620006d357600080fd5b620006e189828a01620005ef565b965050620006f26020880162000684565b94506040870135935060608701359250608087013561ffff811681146200071857600080fd5b8092505060a087013590509295509295509295565b600080600080608085870312156200074457600080fd5b843567ffffffffffffffff8111156200075c57600080fd5b6200076a87828801620005ef565b9450506200077b6020860162000684565b93969395505050506040820135916060013590565b6020808252825182820181905260009190848201906040850190845b81811015620007d35783516001600160a01b031683529284019291840191600101620007ac565b50909695505050505050565b808201808211156200080157634e487b7160e01b600052601160045260246000fd5b92915050565b6000815180845260005b818110156200082f5760208185018101518683018201520162000811565b506000602082860101526020601f19601f83011685010191505092915050565b60006101008a83528060208401526200086b8184018b62000807565b6001600160a01b03998a16604085015297909816606083015250608081019490945260a084019290925261ffff1660c083015260e0909101529392505050565b86815260c060208201526000620008c660c083018862000807565b6001600160a01b039687166040840152949095166060820152608081019290925260a090910152939250505056fe60806040523480156200001157600080fd5b506040516200184838038062001848833981016040819052620000349162000109565b60008890556001620000478882620002cd565b50600280546001600160a81b0319166001600160a01b0397881617905560038054959096166001600160a01b031995909516949094179094556000600955600a5542600b5562786450600d55600f91909155601055600e805461ffff909216620100000263ffffffff1990921691909117905550620003999050565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620000f157600080fd5b919050565b805161ffff81168114620000f157600080fd5b600080600080600080600080610100898b0312156200012757600080fd5b88516020808b0151919950906001600160401b03808211156200014957600080fd5b818c0191508c601f8301126200015e57600080fd5b815181811115620001735762000173620000c3565b604051601f8201601f19908116603f011681019083821181831017156200019e576200019e620000c3565b816040528281528f86848701011115620001b757600080fd5b600093505b82841015620001db5784840186015181850187015292850192620001bc565b6000868483010152809c50505050505050620001fa60408a01620000d9565b95506200020a60608a01620000d9565b94506080890151935060a089015192506200022860c08a01620000f6565b915060e089015190509295985092959890939650565b600181811c908216806200025357607f821691505b6020821081036200027457634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002c857600081815260208120601f850160051c81016020861015620002a35750805b601f850160051c820191505b81811015620002c457828155600101620002af565b5050505b505050565b81516001600160401b03811115620002e957620002e9620000c3565b6200030181620002fa84546200023e565b846200027a565b602080601f831160018114620003395760008415620003205750858301515b600019600386901b1c1916600185901b178555620002c4565b600085815260208120601f198616915b828110156200036a5788860151825594840194600190910190840162000349565b5085821015620003895787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61149f80620003a96000396000f3fe6080604052600436106101665760003560e01c80636682717e116100d1578063a13abdad1161008a578063d76a993611610064578063d76a9936146103da578063ea63a044146103ef578063f19d27f414610404578063fdff62501461041957600080fd5b8063a13abdad1461038d578063a16bfca8146103b2578063acfb8757146103c757600080fd5b80636682717e146103115780636e11a0a7146103245780636e4d243a146103395780637fb3761e1461034e57806389c9836d1461036357806391ac4b881461037857600080fd5b806336a8fafe1161012357806336a8fafe1461023f57806338f0b35414610261578063471ccb2d14610276578063565a2e2c146102985780635822822d146102b65780635b588ac6146102e357600080fd5b806302405ef21461016b5780630ee2cb101461018f5780631a092541146101c15780631d3824ea146101e357806329ab62ae1461020b5780632aa7046914610220575b600080fd5b34801561017757600080fd5b506000545b6040519081526020015b60405180910390f35b34801561019b57600080fd5b506002546001600160a01b03165b6040516001600160a01b039091168152602001610186565b3480156101cd57600080fd5b506101d661044f565b60405161018691906111b8565b3480156101ef57600080fd5b50600e5461ffff165b60405161ffff9091168152602001610186565b34801561021757600080fd5b50600c5461017c565b34801561022c57600080fd5b50600e5462010000900461ffff166101f8565b34801561024b57600080fd5b506102546104e1565b6040516101869190611206565b34801561026d57600080fd5b50600f5461017c565b34801561028257600080fd5b50610296610291366004611253565b610542565b005b3480156102a457600080fd5b506003546001600160a01b03166101a9565b3480156102c257600080fd5b506102d66102d1366004611298565b6108db565b60405161018691906112ea565b3480156102ef57600080fd5b50604080518082019091526005815264537465707360d81b60208201526101d6565b61029661031f366004611312565b61090d565b34801561033057600080fd5b5060095461017c565b34801561034557600080fd5b50610296610b45565b34801561035a57600080fd5b506101d6610bb6565b34801561036f57600080fd5b50600b5461017c565b34801561038457600080fd5b50600a5461017c565b34801561039957600080fd5b506103a2610c20565b6040519015158152602001610186565b3480156103be57600080fd5b50610254610ccc565b3480156103d357600080fd5b50306101a9565b3480156103e657600080fd5b5060105461017c565b3480156103fb57600080fd5b50610254610d2c565b34801561041057600080fd5b50600d5461017c565b34801561042557600080fd5b5061017c610434366004611312565b6001600160a01b031660009081526007602052604090205490565b60606001805461045e9061132d565b80601f016020809104026020016040519081016040528092919081815260200182805461048a9061132d565b80156104d75780601f106104ac576101008083540402835291602001916104d7565b820191906000526020600020905b8154815290600101906020018083116104ba57829003601f168201915b5050505050905090565b606060068054806020026020016040519081016040528092919081815260200182805480156104d757602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161051b575050505050905090565b600e54339061ffff1660000361056b57604051633df9f55160e01b815260040160405180910390fd5b6000805b6005548110156105c757826001600160a01b03166005828154811061059657610596611367565b6000918252602090912001546001600160a01b0316036105b557600191505b806105bf81611393565b91505061056f565b508015156000036105fb5760405163b322caab60e01b81526001600160a01b03831660048201526024015b60405180910390fd5b50600e5461ffff1660009081526008602090815260408083203380855292529091205460019060ff166002811115610635576106356112d4565b148061067e57506002600e5461ffff1660009081526008602090815260408083206001600160a01b038616845290915290205460ff16600281111561067c5761067c6112d4565b145b156106a75760405163f38b013760e01b81526001600160a01b03821660048201526024016105f2565b6001600254600160a01b900460ff1660018111156106c7576106c76112d4565b146106eb576000546040516329a0cca360e21b81526004016105f291815260200190565b821515600103610769575050600e5461ffff1660009081526008602090815260408083203380855292528220805460ff191660019081179091556006805491820181559092527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f90910180546001600160a01b031916909117905550565b8215156000036108d657600e805461ffff90811660009081526008602090815260408083203384528252808320805460ff1916600217905593546007909152928120549092808316926107c4926201000090920416906113ac565b6107ce91906113ce565b336000908152600760205260409020546107e891906113e5565b604051909150600090339083908381818185875af1925050503d806000811461082d576040519150601f19603f3d011682016040523d82523d6000602084013e610832565b606091505b505090508061085d5760405163696aace560e11b8152336004820152602481018390526044016105f2565b336000908152600760205260408120805484929061087c9084906113e5565b92505081905550816009600082825461089591906113e5565b90915550506000546040518381523391907f897b9900c9aa32f244fe8e6fd6f7ee74fc5cb1628aa707611c8a02e1b7a417df9060200160405180910390a350505b505050565b61ffff821660009081526008602090815260408083206001600160a01b038516845290915290205460ff165b92915050565b6000600254600160a01b900460ff16600181111561092d5761092d6112d4565b146109515760005460405163701de89960e11b81526004016105f291815260200190565b6010543410156109745760405163fbb23a7f60e01b815260040160405180910390fd5b6001600160a01b038116610a18573360009081526007602052604081205490036109ee5760048054600181019091557f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b031916339081179091556000908152600760205260409020349055610ac4565b3360009081526007602052604081208054349290610a0d9084906113f8565b90915550610ac49050565b6001600160a01b0381166000908152600760205260408120549003610a965760048054600181019091557f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b0319166001600160a01b0383169081179091556000908152600760205260409020349055610ac4565b6001600160a01b03811660009081526007602052604081208054349290610abe9084906113f8565b90915550505b3460096000828254610ad691906113f8565b90915550506000546040513481523391907f8a488dc8cd2ade9e472d438b05d4ca99d4b6eb64c602e26a33888999bcdc7df39060200160405180910390a3600a5460095410610b4257600280546001919060ff60a01b1916600160a01b835b0217905550610b42610d8c565b50565b6000610b4f610c20565b905080610b6f5760405163632ca04360e11b815260040160405180910390fd5b600254600160a01b900460ff166001811115610b8d57610b8d6112d4565b600003610bae57600280546001919060ff60a01b1916600160a01b83610b35565b610b42610d8c565b60606000600254600160a01b900460ff166001811115610bd857610bd86112d4565b03610bfc575060408051808201909152600481526327b832b760e11b602082015290565b5060408051808201909152600681526510db1bdcd95960d21b602082015290565b90565b600e5460009061ffff168103610c80576000600d54600b5442610c4391906113e5565b1190506000600260149054906101000a900460ff166001811115610c6957610c696112d4565b60005b149050818015610c795750805b9250505090565b600e5461ffff1615610c1d576000600f54600c5442610c9f91906113e5565b1190506000600260149054906101000a900460ff166001811115610cc557610cc56112d4565b6001610c6c565b606060058054806020026020016040519081016040528092919081815260200182805480156104d7576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161051b575050505050905090565b606060048054806020026020016040519081016040528092919081815260200182805480156104d7576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161051b575050505050905090565b6001600254600160a01b900460ff166001811115610dac57610dac6112d4565b14610dd0576000546040516329a0cca360e21b81526004016105f291815260200190565b600e54600090610ded9061ffff808216916201000090041661140b565b610dfb9061ffff16476113ac565b6003546040519192506000916001600160a01b039091169083908381818185875af1925050503d8060008114610e4d576040519150601f19603f3d011682016040523d82523d6000602084013e610e52565b606091505b5050905080610e8a5760035460405163696aace560e11b81526001600160a01b039091166004820152602481018390526044016105f2565b600354600054600e546001600160a01b03909216917f2e743b08da905bd7ac7fa0a1f63e17c7a460e026ed0397cea85e6d7e7a7928b4908590610ed29061ffff16600161142d565b6040805192835261ffff90911660208301520160405180910390a3600e5461ffff16600003610f705760005b600454811015610f6a57600560048281548110610f1d57610f1d611367565b60009182526020808320909101548354600181018555938352912090910180546001600160a01b0319166001600160a01b0390921691909117905580610f6281611393565b915050610efe565b50611104565b600e5461ffff16156111045760005b60055481101561105657600e5461ffff1660009081526008602052604081206005805483919085908110610fb557610fb5611367565b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff166002811115610fee57610fee6112d4565b036110445760066005828154811061100857611008611367565b60009182526020808320909101548354600181018555938352912090910180546001600160a01b0319166001600160a01b039092169190911790555b8061104e81611393565b915050610f7f565b5060408051600081526020810191829052516110749160059161113e565b5060005b6006548110156110e45760056006828154811061109757611097611367565b60009182526020808320909101548354600181018555938352912090910180546001600160a01b0319166001600160a01b03909216919091179055806110dc81611393565b915050611078565b5060408051600081526020810191829052516111029160069161113e565b505b600e805461ffff1690600061111883611448565b91906101000a81548161ffff021916908361ffff1602179055505042600c819055505050565b828054828255906000526020600020908101928215611193579160200282015b8281111561119357825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061115e565b5061119f9291506111a3565b5090565b5b8082111561119f57600081556001016111a4565b600060208083528351808285015260005b818110156111e5578581018301518582016040015282016111c9565b506000604082860101526040601f19601f8301168501019250505092915050565b6020808252825182820181905260009190848201906040850190845b818110156112475783516001600160a01b031683529284019291840191600101611222565b50909695505050505050565b60006020828403121561126557600080fd5b8135801515811461127557600080fd5b9392505050565b80356001600160a01b038116811461129357600080fd5b919050565b600080604083850312156112ab57600080fd5b823561ffff811681146112bd57600080fd5b91506112cb6020840161127c565b90509250929050565b634e487b7160e01b600052602160045260246000fd5b602081016003831061130c57634e487b7160e01b600052602160045260246000fd5b91905290565b60006020828403121561132457600080fd5b6112758261127c565b600181811c9082168061134157607f821691505b60208210810361136157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016113a5576113a561137d565b5060010190565b6000826113c957634e487b7160e01b600052601260045260246000fd5b500490565b80820281158282048414176109075761090761137d565b818103818111156109075761090761137d565b808201808211156109075761090761137d565b61ffff8281168282160390808211156114265761142661137d565b5092915050565b61ffff8181168382160190808211156114265761142661137d565b600061ffff80831681810361145f5761145f61137d565b600101939250505056fea26469706673582212202e6c44540501952bfdacb644777c25e518c603ac9cfa8aff4f9863c5328d112f64736f6c6343000814003360806040523480156200001157600080fd5b5060405162000c4a38038062000c4a8339810160408190526200003491620000cd565b6000869055600162000047868262000273565b50600280546001600160a01b039586166001600160a81b0319909116179055600380546001600160a01b0319169390941692909217909255600060065542600755600891909155600955506200033f9050565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620000c857600080fd5b919050565b60008060008060008060c08789031215620000e757600080fd5b8651602080890151919750906001600160401b03808211156200010957600080fd5b818a0191508a601f8301126200011e57600080fd5b8151818111156200013357620001336200009a565b604051601f8201601f19908116603f011681019083821181831017156200015e576200015e6200009a565b816040528281528d868487010111156200017757600080fd5b600093505b828410156200019b57848401860151818501870152928501926200017c565b6000868483010152809a50505050505050620001ba60408801620000b0565b9350620001ca60608801620000b0565b92506080870151915060a087015190509295509295509295565b600181811c90821680620001f957607f821691505b6020821081036200021a57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200026e57600081815260208120601f850160051c81016020861015620002495750805b601f850160051c820191505b818110156200026a5782815560010162000255565b5050505b505050565b81516001600160401b038111156200028f576200028f6200009a565b620002a781620002a08454620001e4565b8462000220565b602080601f831160018114620002df5760008415620002c65750858301515b600019600386901b1c1916600185901b1785556200026a565b600085815260208120601f198616915b828110156200031057888601518255948401946001909101908401620002ef565b50858210156200032f5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6108fb806200034f6000396000f3fe6080604052600436106100f35760003560e01c80637fb3761e1161008a578063d76a993611610059578063d76a99361461026e578063ea63a04414610283578063fca55c8a146102a5578063fdff6250146102ba57600080fd5b80637fb3761e146101fa578063a13abdad14610221578063acfb875714610246578063bbe303d01461025957600080fd5b80635b588ac6116100c65780635b588ac61461018e5780636682717e146101bb5780636e11a0a7146101d05780636e4d243a146101e557600080fd5b806302405ef2146100f85780630ee2cb101461011c5780631a0925411461014e578063565a2e2c14610170575b600080fd5b34801561010457600080fd5b506000545b6040519081526020015b60405180910390f35b34801561012857600080fd5b506002546001600160a01b03165b6040516001600160a01b039091168152602001610113565b34801561015a57600080fd5b506101636102f0565b6040516101139190610740565b34801561017c57600080fd5b506003546001600160a01b0316610136565b34801561019a57600080fd5b5060408051808201909152600481526354696d6560e01b6020820152610163565b6101ce6101c936600461078e565b610382565b005b3480156101dc57600080fd5b50600654610109565b3480156101f157600080fd5b506101ce610595565b34801561020657600080fd5b50600254600160a01b900460ff1660405161011391906107d4565b34801561022d57600080fd5b50610236610691565b6040519015158152602001610113565b34801561025257600080fd5b5030610136565b34801561026557600080fd5b50600854610109565b34801561027a57600080fd5b50600954610109565b34801561028f57600080fd5b506102986106df565b60405161011391906107fc565b3480156102b157600080fd5b50600754610109565b3480156102c657600080fd5b506101096102d536600461078e565b6001600160a01b031660009081526005602052604090205490565b6060600180546102ff90610849565b80601f016020809104026020016040519081016040528092919081815260200182805461032b90610849565b80156103785780601f1061034d57610100808354040283529160200191610378565b820191906000526020600020905b81548152906001019060200180831161035b57829003601f168201915b5050505050905090565b6000600254600160a01b900460ff1660018111156103a2576103a26107be565b146103cf57600054604051634c9a5a5960e01b81526004016103c691815260200190565b60405180910390fd5b6009543410156103f2576040516316abf07b60e21b815260040160405180910390fd5b6001600160a01b0381166104965733600090815260056020526040812054900361046c5760048054600181019091557f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b031916339081179091556000908152600560205260409020349055610542565b336000908152600560205260408120805434929061048b908490610899565b909155506105429050565b6001600160a01b03811660009081526005602052604081205490036105145760048054600181019091557f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b0319166001600160a01b0383169081179091556000908152600560205260409020349055610542565b6001600160a01b0381166000908152600560205260408120805434929061053c908490610899565b90915550505b34600660008282546105549190610899565b90915550506000546040513481523391907f8a488dc8cd2ade9e472d438b05d4ca99d4b6eb64c602e26a33888999bcdc7df39060200160405180910390a350565b600061059f610691565b9050806105bf57604051636d7af1f960e11b815260040160405180910390fd5b6003546040516000916001600160a01b03169047908381818185875af1925050503d806000811461060c576040519150601f19603f3d011682016040523d82523d6000602084013e610611565b606091505b5050905080610633576040516321b12cc360e11b815260040160405180910390fd5b6002805460ff60a01b1916600160a01b17905560035460005460065460408051918252516001600160a01b03909316927f01a71bd9aa6dc3be63731106cb3d0b8b6d5c38e3f8936ba655827d5d6daa17cc9181900360200190a35050565b600080600854600754426106a591906108b2565b1190506000600260149054906101000a900460ff1660018111156106cb576106cb6107be565b1590508180156106d85750805b9250505090565b6060600480548060200260200160405190810160405280929190818152602001828054801561037857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610719575050505050905090565b600060208083528351808285015260005b8181101561076d57858101830151858201604001528201610751565b506000604082860101526040601f19601f8301168501019250505092915050565b6000602082840312156107a057600080fd5b81356001600160a01b03811681146107b757600080fd5b9392505050565b634e487b7160e01b600052602160045260246000fd5b60208101600283106107f657634e487b7160e01b600052602160045260246000fd5b91905290565b6020808252825182820181905260009190848201906040850190845b8181101561083d5783516001600160a01b031683529284019291840191600101610818565b50909695505050505050565b600181811c9082168061085d57607f821691505b60208210810361087d57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156108ac576108ac610883565b92915050565b818103818111156108ac576108ac61088356fea26469706673582212201c2b869a02501d1960e6c81f4488143929977f78af5678162e6e7bf7c87ff0c664736f6c6343000814003360806040523480156200001157600080fd5b5060405162000eab38038062000eab8339810160408190526200003491620000d4565b600086905560016200004786826200027a565b50600280546001600160a01b039586166001600160a81b0319909116179055600380546001600160a01b031916939094169290921790925560006006554260075562786450600855600991909155600a5550620003469050565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620000cf57600080fd5b919050565b60008060008060008060c08789031215620000ee57600080fd5b8651602080890151919750906001600160401b03808211156200011057600080fd5b818a0191508a601f8301126200012557600080fd5b8151818111156200013a576200013a620000a1565b604051601f8201601f19908116603f01168101908382118183101715620001655762000165620000a1565b816040528281528d868487010111156200017e57600080fd5b600093505b82841015620001a2578484018601518185018701529285019262000183565b6000868483010152809a50505050505050620001c160408801620000b7565b9350620001d160608801620000b7565b92506080870151915060a087015190509295509295509295565b600181811c908216806200020057607f821691505b6020821081036200022157634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200027557600081815260208120601f850160051c81016020861015620002505750805b601f850160051c820191505b8181101562000271578281556001016200025c565b5050505b505050565b81516001600160401b03811115620002965762000296620000a1565b620002ae81620002a78454620001eb565b8462000227565b602080601f831160018114620002e65760008415620002cd5750858301515b600019600386901b1c1916600185901b17855562000271565b600085815260208120601f198616915b828110156200031757888601518255948401946001909101908401620002f6565b5085821015620003365787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b610b5580620003566000396000f3fe6080604052600436106100f35760003560e01c80636e4d243a1161008a578063acfb875711610059578063acfb875714610272578063d76a993614610285578063ea63a0441461029a578063fdff6250146102bc57600080fd5b80636e4d243a146101fc5780637fb3761e1461021157806391ac4b8814610238578063a13abdad1461024d57600080fd5b8063565a2e2c116100c6578063565a2e2c146101855780635b588ac6146101a35780636682717e146101d25780636e11a0a7146101e757600080fd5b806302405ef2146100f85780630ee2cb101461011c578063183aaf5d1461014e5780631a09254114610163575b600080fd5b34801561010457600080fd5b506000545b6040519081526020015b60405180910390f35b34801561012857600080fd5b506002546001600160a01b03165b6040516001600160a01b039091168152602001610113565b34801561015a57600080fd5b50600854610109565b34801561016f57600080fd5b506101786102f2565b604051610113919061096b565b34801561019157600080fd5b506003546001600160a01b0316610136565b3480156101af57600080fd5b5060408051808201909152600681526515185c99d95d60d21b6020820152610178565b6101e56101e03660046109b9565b610384565b005b3480156101f357600080fd5b50600654610109565b34801561020857600080fd5b506101e56105aa565b34801561021d57600080fd5b50600254600160a01b900460ff1660405161011391906109ff565b34801561024457600080fd5b50600954610109565b34801561025957600080fd5b50610262610792565b6040519015158152602001610113565b34801561027e57600080fd5b5030610136565b34801561029157600080fd5b50600a54610109565b3480156102a657600080fd5b506102af6107e0565b6040516101139190610a27565b3480156102c857600080fd5b506101096102d73660046109b9565b6001600160a01b031660009081526005602052604090205490565b60606001805461030190610a74565b80601f016020809104026020016040519081016040528092919081815260200182805461032d90610a74565b801561037a5780601f1061034f5761010080835404028352916020019161037a565b820191906000526020600020905b81548152906001019060200180831161035d57829003601f168201915b5050505050905090565b6000600254600160a01b900460ff1660018111156103a4576103a46109e9565b146103d1576000546040516324bd8b0760e21b81526004016103c891815260200190565b60405180910390fd5b600a543410156103f457604051631de47b3960e31b815260040160405180910390fd5b6001600160a01b0381166104985733600090815260056020526040812054900361046e5760048054600181019091557f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b031916339081179091556000908152600560205260409020349055610544565b336000908152600560205260408120805434929061048d908490610ac4565b909155506105449050565b6001600160a01b03811660009081526005602052604081205490036105165760048054600181019091557f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b0319166001600160a01b0383169081179091556000908152600560205260409020349055610544565b6001600160a01b0381166000908152600560205260408120805434929061053e908490610ac4565b90915550505b34600660008282546105569190610ac4565b90915550506000546040513481523391907f8a488dc8cd2ade9e472d438b05d4ca99d4b6eb64c602e26a33888999bcdc7df39060200160405180910390a3600954600654106105a7576105a7610841565b50565b60006105b4610792565b9050806105d45760405163b9f1e15560e01b815260040160405180910390fd5b60005b600454811015610740576000600482815481106105f6576105f6610add565b6000918252602082200154600480546001600160a01b03909216926005929091908690811061062757610627610add565b6000918252602080832091909101546001600160a01b0316835282019290925260409081018220549051909181818185875af1925050503d806000811461068a576040519150601f19603f3d011682016040523d82523d6000602084013e61068f565b606091505b505090508061072d57600482815481106106ab576106ab610add565b9060005260206000200160009054906101000a90046001600160a01b031660056000600485815481106106e0576106e0610add565b6000918252602080832091909101546001600160a01b039081168452908301939093526040918201902054905163e53fc13560e01b815292909116600483015260248201526044016103c8565b508061073881610af3565b9150506105d7565b506002805460ff60a01b1916600160a01b179055600354600080546040516001600160a01b039093169290917f83f69802d13dad76fe7004f9c4d92d57e09d7dbcd505db3c2d3b427842acc48c91a350565b600080600854600754426107a69190610b0c565b1190506000600260149054906101000a900460ff1660018111156107cc576107cc6109e9565b1590508180156107d95750805b9250505090565b6060600480548060200260200160405190810160405280929190818152602001828054801561037a57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161081a575050505050905090565b6000600254600160a01b900460ff166001811115610861576108616109e9565b14610885576000546040516324bd8b0760e21b81526004016103c891815260200190565b6003546040516000916001600160a01b03169047908381818185875af1925050503d80600081146108d2576040519150601f19603f3d011682016040523d82523d6000602084013e6108d7565b606091505b505090508061090e5760035460405163e53fc13560e01b81526001600160a01b0390911660048201524760248201526044016103c8565b6002805460ff60a01b1916600160a01b17905560035460005460065460408051918252516001600160a01b03909316927f01a71bd9aa6dc3be63731106cb3d0b8b6d5c38e3f8936ba655827d5d6daa17cc9181900360200190a350565b600060208083528351808285015260005b818110156109985785810183015185820160400152820161097c565b506000604082860101526040601f19601f8301168501019250505092915050565b6000602082840312156109cb57600080fd5b81356001600160a01b03811681146109e257600080fd5b9392505050565b634e487b7160e01b600052602160045260246000fd5b6020810160028310610a2157634e487b7160e01b600052602160045260246000fd5b91905290565b6020808252825182820181905260009190848201906040850190845b81811015610a685783516001600160a01b031683529284019291840191600101610a43565b50909695505050505050565b600181811c90821680610a8857607f821691505b602082108103610aa857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610ad757610ad7610aae565b92915050565b634e487b7160e01b600052603260045260246000fd5b600060018201610b0557610b05610aae565b5060010190565b81810381811115610ad757610ad7610aae56fea26469706673582212206b87a22c4e4140c67829f175619aaab7ddf607593fdb7ac9ce3cf53edf44eccf64736f6c63430008140033a2646970667358221220bb86ce95757ab893f9b86738152cf2f8c195f4000ffb76862f75db88112a1e5b64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1428,
        "contract": "contracts/TogetherForCharityContractFactory.sol:TogetherForCharityContractFactory",
        "label": "deployedCampaigns",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1430,
        "contract": "contracts/TogetherForCharityContractFactory.sol:TogetherForCharityContractFactory",
        "label": "numberOfCampaigns",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}