{
  "address": "0x095a250c85677E2355D001EA6d848018B4FbefcD",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract LinkTokenInterface",
          "name": "link",
          "type": "address"
        },
        {
          "internalType": "contract AutomationRegistrarInterface",
          "name": "registrar",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_gasLimit",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "TogetherForCharityContractFactory__RegisterUpkeepFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "campaignID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "campaignAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "CampaignCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "campaignID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "campaignAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EthSentToCampaign",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "targetAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumAmount",
          "type": "uint256"
        }
      ],
      "name": "createCampaignWithTarget",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumAmount",
          "type": "uint256"
        }
      ],
      "name": "createCampaignWithTime",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAutomationRegistrarInterface",
      "outputs": [
        {
          "internalType": "contract AutomationRegistrarInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDeployedCampaigns",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGasLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLinkAmountToSendToKeepers",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLinkTokenInterface",
      "outputs": [
        {
          "internalType": "contract LinkTokenInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfCampaigns",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_campaignAddress",
          "type": "address"
        }
      ],
      "name": "getUpkeepIDFromCampaignAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x845d299d5c9a4ed401058cad272aecb9579c53eae3e9f0ed26cc01b7f26da733",
  "receipt": {
    "to": null,
    "from": "0xa4438eF7BdCEC325d340bF96139d1D5Cb99795c6",
    "contractAddress": "0x095a250c85677E2355D001EA6d848018B4FbefcD",
    "transactionIndex": 67,
    "gasUsed": "4097891",
    "logsBloom": "0x
    "blockHash": "0xa87bb1919680cf3e14b71b9b00d7a7cf876fe83d9b391bc0322cddef86ce1917",
    "transactionHash": "0x845d299d5c9a4ed401058cad272aecb9579c53eae3e9f0ed26cc01b7f26da733",
    "logs": [],
    "blockNumber": 4777601,
    "cumulativeGasUsed": "17824603",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x779877A7B0D9E8603169DdbD7836e478b4624789",
    "0xb0E49c5D0d05cbc241d68c05BC5BA1d1B7B72976",
    200000
  ],
  "numDeployments": 14,
  "solcInputHash": "ccea417aa3c96dbfd8080760986dd23f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract LinkTokenInterface\",\"name\":\"link\",\"type\":\"address\"},{\"internalType\":\"contract AutomationRegistrarInterface\",\"name\":\"registrar\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_gasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"TogetherForCharityContractFactory__RegisterUpkeepFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"campaignID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"campaignAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"CampaignCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"campaignID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"campaignAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EthSentToCampaign\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumAmount\",\"type\":\"uint256\"}],\"name\":\"createCampaignWithTarget\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumAmount\",\"type\":\"uint256\"}],\"name\":\"createCampaignWithTime\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAutomationRegistrarInterface\",\"outputs\":[{\"internalType\":\"contract AutomationRegistrarInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDeployedCampaigns\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLinkAmountToSendToKeepers\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLinkTokenInterface\",\"outputs\":[{\"internalType\":\"contract LinkTokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfCampaigns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_campaignAddress\",\"type\":\"address\"}],\"name\":\"getUpkeepIDFromCampaignAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TogetherForCharityContractFactory.sol\":\"TogetherForCharityContractFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\\n\\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xac02fbc0c7d194e525a71f524d1f7c472df73e19c2b527d7b529badaeaf0ec51\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/TogetherForCharityContractFactory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport {LinkTokenInterface} from \\\"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./TogetherForCharityWithTime.sol\\\";\\nimport \\\"./TogetherForCharityWithTarget.sol\\\";\\n\\nstruct RegistrationParams {\\n    string name;\\n    bytes encryptedEmail;\\n    address upkeepContract;\\n    uint32 gasLimit;\\n    address adminAddress;\\n    uint8 triggerType;\\n    bytes checkData;\\n    bytes triggerConfig;\\n    bytes offchainConfig;\\n    uint96 amount;\\n}\\n\\ninterface AutomationRegistrarInterface {\\n    function registerUpkeep(\\n        RegistrationParams calldata requestParams\\n    ) external returns (uint256);\\n}\\n\\nerror TogetherForCharityContractFactory__RegisterUpkeepFailed();\\nerror TogetherForCharityContractFactory__TransferFailed();\\n\\ncontract TogetherForCharityContractFactory {\\n    /* State Variables */\\n    LinkTokenInterface private immutable i_link;\\n    AutomationRegistrarInterface private immutable i_registrar;\\n    mapping(address => uint256) private campaignAddressToUpkeepID;\\n    uint32 private gasLimit;\\n    uint96 private linkAmount;\\n\\n    address[] private deployedCampaigns;\\n    uint256 private numberOfCampaigns;\\n\\n    /* Constructor */\\n    constructor(\\n        LinkTokenInterface link,\\n        AutomationRegistrarInterface registrar,\\n        uint32 _gasLimit\\n    ) {\\n        i_link = link;\\n        i_registrar = registrar;\\n        gasLimit = _gasLimit;\\n        linkAmount = 1 * 10 ** 18;\\n\\n        deployedCampaigns = new address[](0);\\n        numberOfCampaigns = 0;\\n    }\\n\\n    /* Functions */\\n    function createCampaignWithTarget(\\n        string memory description,\\n        address beneficiary,\\n        uint256 targetAmount,\\n        uint256 minimumAmount\\n    ) public payable {\\n        numberOfCampaigns += 1;\\n        TogetherForCharityWithTarget newCampaign = new TogetherForCharityWithTarget(\\n                numberOfCampaigns,\\n                description,\\n                msg.sender,\\n                beneficiary,\\n                msg.value,\\n                targetAmount,\\n                minimumAmount\\n            );\\n\\n        deployedCampaigns.push(address(newCampaign));\\n\\n        emit CampaignCreated(\\n            numberOfCampaigns,\\n            address(newCampaign),\\n            msg.sender,\\n            beneficiary\\n        );\\n    }\\n\\n    function createCampaignWithTime(\\n        string memory description,\\n        address beneficiary,\\n        uint256 totalTime,\\n        uint256 minimumAmount\\n    ) public payable {\\n        numberOfCampaigns += 1;\\n        TogetherForCharityWithTime newCampaign = new TogetherForCharityWithTime(\\n            numberOfCampaigns,\\n            description,\\n            msg.sender,\\n            beneficiary,\\n            msg.value,\\n            totalTime,\\n            minimumAmount\\n        );\\n\\n        RegistrationParams memory newRegistrationParams = RegistrationParams(\\n            string.concat(\\\"Campaign \\\", Strings.toString(numberOfCampaigns)),\\n            \\\"0x\\\",\\n            address(newCampaign),\\n            gasLimit,\\n            address(this),\\n            0,\\n            \\\"0x\\\",\\n            \\\"0x\\\",\\n            \\\"0x\\\",\\n            linkAmount\\n        );\\n\\n        registerAndPredictID(newRegistrationParams);\\n\\n        deployedCampaigns.push(address(newCampaign));\\n\\n        emit CampaignCreated(\\n            numberOfCampaigns,\\n            address(newCampaign),\\n            msg.sender,\\n            beneficiary\\n        );\\n\\n        newCampaign.fundCampaign{value: msg.value}(msg.sender);\\n\\n        emit EthSentToCampaign(\\n            numberOfCampaigns,\\n            address(newCampaign),\\n            msg.value\\n        );\\n    }\\n\\n    function registerAndPredictID(RegistrationParams memory params) internal {\\n        i_link.approve(address(i_registrar), params.amount);\\n        uint256 upkeepID = i_registrar.registerUpkeep(params);\\n\\n        if (upkeepID != 0) {\\n            campaignAddressToUpkeepID[params.upkeepContract] = upkeepID;\\n        } else {\\n            revert TogetherForCharityContractFactory__RegisterUpkeepFailed();\\n        }\\n    }\\n\\n    function getLinkTokenInterface() public view returns (LinkTokenInterface) {\\n        return i_link;\\n    }\\n\\n    function getAutomationRegistrarInterface()\\n        public\\n        view\\n        returns (AutomationRegistrarInterface)\\n    {\\n        return i_registrar;\\n    }\\n\\n    function getUpkeepIDFromCampaignAddress(\\n        address _campaignAddress\\n    ) public view returns (uint256) {\\n        return campaignAddressToUpkeepID[_campaignAddress];\\n    }\\n\\n    function getGasLimit() public view returns (uint256) {\\n        return gasLimit;\\n    }\\n\\n    function getLinkAmountToSendToKeepers() public view returns (uint96) {\\n        return linkAmount;\\n    }\\n\\n    function getDeployedCampaigns() public view returns (address[] memory) {\\n        return deployedCampaigns;\\n    }\\n\\n    function getNumberOfCampaigns() public view returns (uint256) {\\n        return numberOfCampaigns;\\n    }\\n\\n    /* Events */\\n    event CampaignCreated(\\n        uint256 campaignID,\\n        address indexed campaignAddress,\\n        address indexed creator,\\n        address indexed beneficiary\\n    );\\n\\n    event EthSentToCampaign(\\n        uint256 campaignID,\\n        address indexed campaignAddress,\\n        uint256 amount\\n    );\\n}\\n\",\"keccak256\":\"0xd00ac6f36e34f1c553139aa032c0f7d18b0566b7baf9e96a5f6652478b46cca5\",\"license\":\"MIT\"},\"contracts/TogetherForCharityWithTarget.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n/* Errors */\\nerror TogetherForCharityWithTarget__TooSmallDonation();\\nerror TogetherForCharityWithTarget__CampaignClosed();\\nerror TogetherForCharityWithTarget__TransferFailed();\\n\\ncontract TogetherForCharityWithTarget {\\n    /* Modifiers */\\n    modifier CampaignClosed() {\\n        if (state != CampaignState.OPEN) {\\n            // If the campaign is close\\n            revert TogetherForCharityWithTarget__CampaignClosed();\\n        }\\n        _;\\n    }\\n\\n    /* Type declarations */\\n    enum CampaignState {\\n        OPEN,\\n        CLOSED\\n    }\\n\\n    /* Campaign Variables */\\n    uint256 private campaignID;\\n    string private description;\\n    address private creator;\\n    CampaignState private state;\\n    address payable private beneficiary;\\n    address[] private funders;\\n    mapping(address => uint256) private fundersToAmount;\\n    uint256 private totalFunded;\\n    uint256 private targetAmount;\\n    uint256 private minimumDonation;\\n\\n    /* Constructor */\\n    constructor(\\n        uint256 _campaignID,\\n        string memory _description,\\n        address _creator,\\n        address _beneficiary,\\n        uint256 _amountFounded,\\n        uint256 _targetAmount,\\n        uint256 _minimumAmount\\n    ) {\\n        campaignID = _campaignID;\\n        description = _description;\\n        creator = _creator;\\n        state = CampaignState.OPEN;\\n        beneficiary = payable(_beneficiary);\\n        funders = new address[](0);\\n        funders.push(_creator);\\n        fundersToAmount[_creator] = _amountFounded;\\n        totalFunded = _amountFounded;\\n        targetAmount = _targetAmount;\\n        minimumDonation = _minimumAmount;\\n    }\\n\\n    /* Functions */\\n    function fundCampaign() public payable CampaignClosed {\\n        if (msg.value < minimumDonation) {\\n            revert TogetherForCharityWithTarget__TooSmallDonation();\\n        }\\n\\n        funders.push(msg.sender);\\n        fundersToAmount[msg.sender] = msg.value;\\n        totalFunded += msg.value;\\n\\n        emit CampaignFunded(campaignID, msg.sender, msg.value);\\n\\n        if (totalFunded >= targetAmount) {\\n            deliverCampaign();\\n        }\\n    }\\n\\n    function deliverCampaign() internal CampaignClosed {\\n        (bool success, ) = beneficiary.call{value: totalFunded}(\\\"\\\");\\n        if (!success) {\\n            revert TogetherForCharityWithTarget__TransferFailed();\\n        }\\n\\n        state = CampaignState.CLOSED; // Campaign Closed\\n\\n        emit CampaignDelivered(campaignID, beneficiary, totalFunded);\\n    }\\n\\n    function getCampaignID() public view returns (uint256) {\\n        return campaignID;\\n    }\\n\\n    function getDescription() public view returns (string memory) {\\n        return description;\\n    }\\n\\n    function getCreator() public view returns (address) {\\n        return creator;\\n    }\\n\\n    function getCampaignState() public view returns (CampaignState) {\\n        return state;\\n    }\\n\\n    function getBeneficiary() public view returns (address) {\\n        return beneficiary;\\n    }\\n\\n    function getFunders() public view returns (address[] memory) {\\n        return funders;\\n    }\\n\\n    function getAmountFundedFromFunder(\\n        address _funder\\n    ) public view returns (uint256) {\\n        return fundersToAmount[_funder];\\n    }\\n\\n    function getTotalAmountFunded() public view returns (uint256) {\\n        return totalFunded;\\n    }\\n\\n    function getTargetAmount() public view returns (uint256) {\\n        return targetAmount;\\n    }\\n\\n    function getMinimumDonation() public view returns (uint256) {\\n        return minimumDonation;\\n    }\\n\\n    /* Events */\\n    event CampaignFunded(\\n        uint256 indexed campaignID,\\n        address indexed funder,\\n        uint256 amount\\n    );\\n    event CampaignDelivered(\\n        uint256 indexed campaignID,\\n        address indexed beneficiary,\\n        uint256 amount\\n    );\\n}\\n\",\"keccak256\":\"0x871157d9151644647af6af2a90c39d5e7022f7696d5d355d97bcef0b65444edd\",\"license\":\"MIT\"},\"contracts/TogetherForCharityWithTime.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\\\";\\n\\n/* Errors */\\nerror TogetherForCharityWithTime__TooShortDuration();\\nerror TogetherForCharityWithTime__TooSmallDonation();\\nerror TogetherForCharityWithTime__CampaignClosed();\\nerror TogetherForCharityWithTime__TransferFailed();\\nerror TogetherForCharityWithTime__UpkeepNotNeeded();\\n\\ncontract TogetherForCharityWithTime is AutomationCompatibleInterface {\\n    /* Modifiers */\\n    modifier CampaignClosed() {\\n        if (state != CampaignState.OPEN) {\\n            // If the campaign is close\\n            revert TogetherForCharityWithTime__CampaignClosed();\\n        }\\n        _;\\n    }\\n\\n    /* Type declarations */\\n    enum CampaignState {\\n        OPEN,\\n        CLOSED\\n    }\\n\\n    /* Campaign Variables */\\n    uint256 private campaignID;\\n    string private description;\\n    address private creator;\\n    CampaignState private state;\\n    address payable private beneficiary;\\n    address[] private funders;\\n    mapping(address => uint256) private fundersToAmount;\\n    uint256 private totalFunded;\\n    uint256 private createdTimestamp;\\n    uint256 private totalTime;\\n    uint256 private minimumDonation;\\n\\n    /* Constructor */\\n    constructor(\\n        uint256 _campaignID,\\n        string memory _description,\\n        address _creator,\\n        address _beneficiary,\\n        uint256 _amountFounded,\\n        uint256 _totalTime,\\n        uint256 _minimumAmount\\n    ) {\\n        campaignID = _campaignID;\\n        description = _description;\\n        creator = _creator;\\n        state = CampaignState.OPEN;\\n        beneficiary = payable(_beneficiary);\\n        funders = new address[](0);\\n        funders.push(_creator);\\n        fundersToAmount[_creator] = _amountFounded;\\n        totalFunded = _amountFounded;\\n        createdTimestamp = block.timestamp;\\n        totalTime = _totalTime;\\n        minimumDonation = _minimumAmount;\\n    }\\n\\n    /* Functions */\\n    function fundCampaign(address funder) public payable CampaignClosed {\\n        if (msg.value < minimumDonation) {\\n            revert TogetherForCharityWithTime__TooSmallDonation();\\n        }\\n\\n        if (funder == address(0)) {\\n            funders.push(msg.sender);\\n            fundersToAmount[msg.sender] = msg.value;\\n        } else {\\n            funders.push(funder);\\n            fundersToAmount[funder] = msg.value;\\n        }\\n\\n        totalFunded += msg.value;\\n\\n        emit CampaignFunded(campaignID, msg.sender, msg.value);\\n    }\\n\\n    function checkUpkeep(\\n        bytes memory /* checkData */\\n    )\\n        public\\n        override\\n        returns (bool upkeepNeeded, bytes memory /* performData */)\\n    {\\n        bool timePassed = ((block.timestamp - createdTimestamp) > totalTime);\\n        bool isOpen = (CampaignState.OPEN == state);\\n\\n        upkeepNeeded = (timePassed && isOpen);\\n    }\\n\\n    function performUpkeep(bytes calldata /* performData */) external override {\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n\\n        if (!upkeepNeeded) {\\n            revert TogetherForCharityWithTime__UpkeepNotNeeded();\\n        }\\n\\n        (bool success, ) = beneficiary.call{value: address(this).balance}(\\\"\\\");\\n        if (!success) {\\n            revert TogetherForCharityWithTime__TransferFailed();\\n        }\\n\\n        state = CampaignState.CLOSED; // Closing campaign\\n\\n        emit CampaignDelivered(campaignID, beneficiary, totalFunded);\\n    }\\n\\n    function getCampaignID() public view returns (uint256) {\\n        return campaignID;\\n    }\\n\\n    function getDescription() public view returns (string memory) {\\n        return description;\\n    }\\n\\n    function getCreator() public view returns (address) {\\n        return creator;\\n    }\\n\\n    function getCampaignState() public view returns (CampaignState) {\\n        return state;\\n    }\\n\\n    function getBeneficiary() public view returns (address) {\\n        return beneficiary;\\n    }\\n\\n    function getFunders() public view returns (address[] memory) {\\n        return funders;\\n    }\\n\\n    function getAmountFundedFromFunder(\\n        address _funder\\n    ) public view returns (uint256) {\\n        return fundersToAmount[_funder];\\n    }\\n\\n    function getTotalAmountFunded() public view returns (uint256) {\\n        return totalFunded;\\n    }\\n\\n    function getCreationTimeStamp() public view returns (uint256) {\\n        return createdTimestamp;\\n    }\\n\\n    function getCampaignDurationSeconds() public view returns (uint256) {\\n        return totalTime;\\n    }\\n\\n    function getMinimumDonation() public view returns (uint256) {\\n        return minimumDonation;\\n    }\\n\\n    /* Events */\\n    event CampaignFunded(\\n        uint256 indexed campaignID,\\n        address indexed funder,\\n        uint256 amount\\n    );\\n    event CampaignDelivered(\\n        uint256 indexed campaignID,\\n        address indexed beneficiary,\\n        uint256 amount\\n    );\\n}\\n\",\"keccak256\":\"0x4181f4a9493accb8432ad33f5af1dc3c7a18535dfa6ee403135bb248a71c6152\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162004cac38038062004cac833981810160405281019062000037919062000322565b8273ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff168152505080600160006101000a81548163ffffffff021916908363ffffffff160217905550670de0b6b3a7640000600160046101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550600067ffffffffffffffff8111156200011757620001166200037e565b5b604051908082528060200260200182016040528015620001465781602001602082028036833780820191505090505b50600290805190602001906200015e92919062000170565b506000600381905550505050620003ad565b828054828255906000526020600020908101928215620001ec579160200282015b82811115620001eb5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019062000191565b5b509050620001fb9190620001ff565b5090565b5b808211156200021a57600081600090555060010162000200565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002508262000223565b9050919050565b6000620002648262000243565b9050919050565b620002768162000257565b81146200028257600080fd5b50565b60008151905062000296816200026b565b92915050565b6000620002a98262000243565b9050919050565b620002bb816200029c565b8114620002c757600080fd5b50565b600081519050620002db81620002b0565b92915050565b600063ffffffff82169050919050565b620002fc81620002e1565b81146200030857600080fd5b50565b6000815190506200031c81620002f1565b92915050565b6000806000606084860312156200033e576200033d6200021e565b5b60006200034e8682870162000285565b93505060206200036186828701620002ca565b925050604062000374868287016200030b565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60805160a0516148c4620003e86000396000818161081c015281816109f30152610a8201526000818161084401526109b701526148c46000f3fe608060405260043610620000925760003560e01c8063a45bde451162000061578063a45bde451462000137578063c4b9a6f81462000167578063e4aafc2c1462000197578063e8d9469f14620001c7578063e95d0568146200020b5762000092565b80631a93d1c3146200009757806345c6877814620000c75780634acb9d4f14620000e757806388656f3e1462000117575b600080fd5b348015620000a457600080fd5b50620000af6200023b565b604051620000be919062000d52565b60405180910390f35b620000e56004803603810190620000df919062000f7b565b6200025b565b005b348015620000f457600080fd5b50620000ff62000637565b6040516200010e9190620010da565b60405180910390f35b6200013560048036038101906200012f919062000f7b565b620006c7565b005b3480156200014457600080fd5b506200014f62000818565b6040516200015e919062001169565b60405180910390f35b3480156200017457600080fd5b506200017f62000840565b6040516200018e9190620011ab565b60405180910390f35b348015620001a457600080fd5b50620001af62000868565b604051620001be919062000d52565b60405180910390f35b348015620001d457600080fd5b50620001f36004803603810190620001ed9190620011c8565b62000872565b60405162000202919062000d52565b60405180910390f35b3480156200021857600080fd5b5062000223620008ba565b60405162000232919062001223565b60405180910390f35b6000600160009054906101000a900463ffffffff1663ffffffff16905090565b6001600360008282546200027091906200126f565b925050819055506000600354853386348787604051620002909062000d1b565b620002a2979695949392919062001344565b604051809103906000f080158015620002bf573d6000803e3d6000fd5b5090506000604051806101400160405280620002dd600354620008dc565b604051602001620002ef919062001430565b60405160208183030381529060405281526020016040518060400160405280600281526020017f307800000000000000000000000000000000000000000000000000000000000081525081526020018373ffffffffffffffffffffffffffffffffffffffff168152602001600160009054906101000a900463ffffffff1663ffffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff168152602001600060ff1681526020016040518060400160405280600281526020017f307800000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600281526020017f307800000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600281526020017f30780000000000000000000000000000000000000000000000000000000000008152508152602001600160049054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff1681525090506200048881620009b5565b6002829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f236f70f4f540eb28fe7453185cf0574276aac9f6ebb887a59f51f184acd4b78c60035460405162000563919062000d52565b60405180910390a48173ffffffffffffffffffffffffffffffffffffffff16636682717e34336040518363ffffffff1660e01b8152600401620005a791906200145a565b6000604051808303818588803b158015620005c157600080fd5b505af1158015620005d6573d6000803e3d6000fd5b50505050508173ffffffffffffffffffffffffffffffffffffffff167fc253f5abb69e38f225daa366045a23a2bf233aa243be30c7baef3a32636440cb600354346040516200062792919062001477565b60405180910390a2505050505050565b60606002805480602002602001604051908101604052809291908181526020018280548015620006bd57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831162000672575b5050505050905090565b600160036000828254620006dc91906200126f565b925050819055506000600354853386348787604051620006fc9062000d29565b6200070e979695949392919062001344565b604051809103906000f0801580156200072b573d6000803e3d6000fd5b5090506002819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f236f70f4f540eb28fe7453185cf0574276aac9f6ebb887a59f51f184acd4b78c60035460405162000809919062000d52565b60405180910390a45050505050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600354905090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600160049054906101000a90046bffffffffffffffffffffffff16905090565b606060006001620008ed8462000baf565b01905060008167ffffffffffffffff8111156200090f576200090e62000d9e565b5b6040519080825280601f01601f191660200182016040528015620009425781602001600182028036833780820191505090505b509050600082602001820190505b600115620009aa578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85816200099d576200099c620014a4565b5b0494506000850362000950575b819350505050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f00000000000000000000000000000000000000000000000000000000000000008361012001516040518363ffffffff1660e01b815260040162000a379291906200150c565b6020604051808303816000875af115801562000a57573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a7d919062001576565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633f678e11836040518263ffffffff1660e01b815260040162000adb9190620017b1565b6020604051808303816000875af115801562000afb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b219190620017ec565b90506000811462000b795780600080846040015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555062000bab565b6040517f1aff3dde00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831062000c11577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838162000c075762000c06620014a4565b5b0492506040810190505b6d04ee2d6d415b85acef8100000000831062000c52576d04ee2d6d415b85acef8100000000838162000c485762000c47620014a4565b5b0492506020810190505b662386f26fc10000831062000c8557662386f26fc10000838162000c7b5762000c7a620014a4565b5b0492506010810190505b6305f5e100831062000cb2576305f5e100838162000ca85762000ca7620014a4565b5b0492506008810190505b612710831062000cdb57612710838162000cd15762000cd0620014a4565b5b0492506004810190505b6064831062000d02576064838162000cf85762000cf7620014a4565b5b0492506002810190505b600a831062000d12576001810190505b80915050919050565b611ac9806200181f83390190565b6115a780620032e883390190565b6000819050919050565b62000d4c8162000d37565b82525050565b600060208201905062000d69600083018462000d41565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000dd88262000d8d565b810181811067ffffffffffffffff8211171562000dfa5762000df962000d9e565b5b80604052505050565b600062000e0f62000d6f565b905062000e1d828262000dcd565b919050565b600067ffffffffffffffff82111562000e405762000e3f62000d9e565b5b62000e4b8262000d8d565b9050602081019050919050565b82818337600083830152505050565b600062000e7e62000e788462000e22565b62000e03565b90508281526020810184848401111562000e9d5762000e9c62000d88565b5b62000eaa84828562000e58565b509392505050565b600082601f83011262000eca5762000ec962000d83565b5b813562000edc84826020860162000e67565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000f128262000ee5565b9050919050565b62000f248162000f05565b811462000f3057600080fd5b50565b60008135905062000f448162000f19565b92915050565b62000f558162000d37565b811462000f6157600080fd5b50565b60008135905062000f758162000f4a565b92915050565b6000806000806080858703121562000f985762000f9762000d79565b5b600085013567ffffffffffffffff81111562000fb95762000fb862000d7e565b5b62000fc78782880162000eb2565b945050602062000fda8782880162000f33565b935050604062000fed8782880162000f64565b9250506060620010008782880162000f64565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b620010438162000f05565b82525050565b600062001057838362001038565b60208301905092915050565b6000602082019050919050565b60006200107d826200100c565b62001089818562001017565b9350620010968362001028565b8060005b83811015620010cd578151620010b1888262001049565b9750620010be8362001063565b9250506001810190506200109a565b5085935050505092915050565b60006020820190508181036000830152620010f6818462001070565b905092915050565b6000819050919050565b600062001129620011236200111d8462000ee5565b620010fe565b62000ee5565b9050919050565b60006200113d8262001108565b9050919050565b6000620011518262001130565b9050919050565b620011638162001144565b82525050565b600060208201905062001180600083018462001158565b92915050565b6000620011938262001130565b9050919050565b620011a58162001186565b82525050565b6000602082019050620011c260008301846200119a565b92915050565b600060208284031215620011e157620011e062000d79565b5b6000620011f18482850162000f33565b91505092915050565b60006bffffffffffffffffffffffff82169050919050565b6200121d81620011fa565b82525050565b60006020820190506200123a600083018462001212565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006200127c8262000d37565b9150620012898362000d37565b9250828201905080821115620012a457620012a362001240565b5b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015620012e6578082015181840152602081019050620012c9565b60008484015250505050565b6000620012ff82620012aa565b6200130b8185620012b5565b93506200131d818560208601620012c6565b620013288162000d8d565b840191505092915050565b6200133e8162000f05565b82525050565b600060e0820190506200135b600083018a62000d41565b81810360208301526200136f8189620012f2565b905062001380604083018862001333565b6200138f606083018762001333565b6200139e608083018662000d41565b620013ad60a083018562000d41565b620013bc60c083018462000d41565b98975050505050505050565b7f43616d706169676e200000000000000000000000000000000000000000000000815250565b600081905092915050565b60006200140682620012aa565b620014128185620013ee565b935062001424818560208601620012c6565b80840191505092915050565b60006200143d82620013c8565b6009820191506200144f8284620013f9565b915081905092915050565b600060208201905062001471600083018462001333565b92915050565b60006040820190506200148e600083018562000d41565b6200149d602083018462000d41565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000620014f4620014ee620014e884620011fa565b620010fe565b62000d37565b9050919050565b6200150681620014d3565b82525050565b600060408201905062001523600083018562001333565b620015326020830184620014fb565b9392505050565b60008115159050919050565b620015508162001539565b81146200155c57600080fd5b50565b600081519050620015708162001545565b92915050565b6000602082840312156200158f576200158e62000d79565b5b60006200159f848285016200155f565b91505092915050565b600082825260208201905092915050565b6000620015c682620012aa565b620015d28185620015a8565b9350620015e4818560208601620012c6565b620015ef8162000d8d565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b60006200162382620015fa565b6200162f818562001605565b935062001641818560208601620012c6565b6200164c8162000d8d565b840191505092915050565b600063ffffffff82169050919050565b620016728162001657565b82525050565b600060ff82169050919050565b620016908162001678565b82525050565b620016a181620011fa565b82525050565b6000610140830160008301518482036000860152620016c78282620015b9565b91505060208301518482036020860152620016e3828262001616565b9150506040830151620016fa604086018262001038565b5060608301516200170f606086018262001667565b50608083015162001724608086018262001038565b5060a08301516200173960a086018262001685565b5060c083015184820360c086015262001753828262001616565b91505060e083015184820360e08601526200176f828262001616565b9150506101008301518482036101008601526200178d828262001616565b915050610120830151620017a661012086018262001696565b508091505092915050565b60006020820190508181036000830152620017cd8184620016a7565b905092915050565b600081519050620017e68162000f4a565b92915050565b60006020828403121562001805576200180462000d79565b5b60006200181584828501620017d5565b9150509291505056fe60806040523480156200001157600080fd5b5060405162001ac938038062001ac9833981810160405281019062000037919062000517565b8660008190555085600190816200004f91906200082a565b5084600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600260146101000a81548160ff02191690836001811115620000ba57620000b962000911565b5b021790555083600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff8111156200011e576200011d6200034e565b5b6040519080825280602002602001820160405280156200014d5781602001602082028036833780820191505090505b50600490805190602001906200016592919062000236565b506004859080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550826006819055504260078190555081600881905550806009819055505050505050505062000940565b828054828255906000526020600020908101928215620002b2579160200282015b82811115620002b15782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019062000257565b5b509050620002c19190620002c5565b5090565b5b80821115620002e0576000816000905550600101620002c6565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6200030d81620002f8565b81146200031957600080fd5b50565b6000815190506200032d8162000302565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000388826200033d565b810181811067ffffffffffffffff82111715620003aa57620003a96200034e565b5b80604052505050565b6000620003bf620002e4565b9050620003cd82826200037d565b919050565b600067ffffffffffffffff821115620003f057620003ef6200034e565b5b620003fb826200033d565b9050602081019050919050565b60005b83811015620004285780820151818401526020810190506200040b565b60008484015250505050565b60006200044b6200044584620003d2565b620003b3565b9050828152602081018484840111156200046a576200046962000338565b5b6200047784828562000408565b509392505050565b600082601f83011262000497576200049662000333565b5b8151620004a984826020860162000434565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620004df82620004b2565b9050919050565b620004f181620004d2565b8114620004fd57600080fd5b50565b6000815190506200051181620004e6565b92915050565b600080600080600080600060e0888a031215620005395762000538620002ee565b5b6000620005498a828b016200031c565b975050602088015167ffffffffffffffff8111156200056d576200056c620002f3565b5b6200057b8a828b016200047f565b96505060406200058e8a828b0162000500565b9550506060620005a18a828b0162000500565b9450506080620005b48a828b016200031c565b93505060a0620005c78a828b016200031c565b92505060c0620005da8a828b016200031c565b91505092959891949750929550565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200063c57607f821691505b602082108103620006525762000651620005f4565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620006bc7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200067d565b620006c886836200067d565b95508019841693508086168417925050509392505050565b6000819050919050565b60006200070b62000705620006ff84620002f8565b620006e0565b620002f8565b9050919050565b6000819050919050565b6200072783620006ea565b6200073f620007368262000712565b8484546200068a565b825550505050565b600090565b6200075662000747565b620007638184846200071c565b505050565b5b818110156200078b576200077f6000826200074c565b60018101905062000769565b5050565b601f821115620007da57620007a48162000658565b620007af846200066d565b81016020851015620007bf578190505b620007d7620007ce856200066d565b83018262000768565b50505b505050565b600082821c905092915050565b6000620007ff60001984600802620007df565b1980831691505092915050565b60006200081a8383620007ec565b9150826002028217905092915050565b6200083582620005e9565b67ffffffffffffffff8111156200085157620008506200034e565b5b6200085d825462000623565b6200086a8282856200078f565b600060209050601f831160018114620008a257600084156200088d578287015190505b6200089985826200080c565b86555062000909565b601f198416620008b28662000658565b60005b82811015620008dc57848901518255600182019150602085019450602081019050620008b5565b86831015620008fc5784890151620008f8601f891682620007ec565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b61117980620009506000396000f3fe6080604052600436106100dd5760003560e01c80636e11a0a71161007f578063d76a993611610059578063d76a993614610292578063ea63a044146102bd578063fca55c8a146102e8578063fdff625014610313576100dd565b80636e11a0a7146102115780637fb3761e1461023c578063bbe303d014610267576100dd565b80634585e33b116100bb5780634585e33b14610163578063565a2e2c1461018c5780636682717e146101b75780636e04ff0d146101d3576100dd565b806302405ef2146100e25780630ee2cb101461010d5780631a09254114610138575b600080fd5b3480156100ee57600080fd5b506100f7610350565b6040516101049190610a33565b60405180910390f35b34801561011957600080fd5b50610122610359565b60405161012f9190610a8f565b60405180910390f35b34801561014457600080fd5b5061014d610383565b60405161015a9190610b3a565b60405180910390f35b34801561016f57600080fd5b5061018a60048036038101906101859190610bd5565b610415565b005b34801561019857600080fd5b506101a16105d4565b6040516101ae9190610a8f565b60405180910390f35b6101d160048036038101906101cc9190610c4e565b6105fe565b005b3480156101df57600080fd5b506101fa60048036038101906101f59190610dab565b61089c565b604051610208929190610e64565b60405180910390f35b34801561021d57600080fd5b50610226610904565b6040516102339190610a33565b60405180910390f35b34801561024857600080fd5b5061025161090e565b60405161025e9190610f0b565b60405180910390f35b34801561027357600080fd5b5061027c610925565b6040516102899190610a33565b60405180910390f35b34801561029e57600080fd5b506102a761092f565b6040516102b49190610a33565b60405180910390f35b3480156102c957600080fd5b506102d2610939565b6040516102df9190610fe4565b60405180910390f35b3480156102f457600080fd5b506102fd6109c7565b60405161030a9190610a33565b60405180910390f35b34801561031f57600080fd5b5061033a60048036038101906103359190610c4e565b6109d1565b6040516103479190610a33565b60405180910390f35b60008054905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606001805461039290611035565b80601f01602080910402602001604051908101604052809291908181526020018280546103be90611035565b801561040b5780601f106103e05761010080835404028352916020019161040b565b820191906000526020600020905b8154815290600101906020018083116103ee57829003601f168201915b5050505050905090565b600061042f6040518060200160405280600081525061089c565b50905080610469576040517fdaf5e3f200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16476040516104b190611097565b60006040518083038185875af1925050503d80600081146104ee576040519150601f19603f3d011682016040523d82523d6000602084013e6104f3565b606091505b505090508061052e576040517f4362598600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600260146101000a81548160ff0219169083600181111561055457610553610e94565b5b0217905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166000547f01a71bd9aa6dc3be63731106cb3d0b8b6d5c38e3f8936ba655827d5d6daa17cc6006546040516105c69190610a33565b60405180910390a350505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600181111561061257610611610e94565b5b600260149054906101000a900460ff16600181111561063457610633610e94565b5b1461066b576040517f2bb7f64300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6009543410156106a7576040517f5aafc1ec00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610787576004339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061082f565b6004819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b346006600082825461084191906110db565b925050819055503373ffffffffffffffffffffffffffffffffffffffff166000547f8a488dc8cd2ade9e472d438b05d4ca99d4b6eb64c602e26a33888999bcdc7df3346040516108919190610a33565b60405180910390a350565b600060606000600854600754426108b3919061110f565b1190506000600260149054906101000a900460ff1660018111156108da576108d9610e94565b5b600060018111156108ee576108ed610e94565b5b1490508180156108fb5750805b93505050915091565b6000600654905090565b6000600260149054906101000a900460ff16905090565b6000600854905090565b6000600954905090565b606060048054806020026020016040519081016040528092919081815260200182805480156109bd57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610973575b5050505050905090565b6000600754905090565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000819050919050565b610a2d81610a1a565b82525050565b6000602082019050610a486000830184610a24565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a7982610a4e565b9050919050565b610a8981610a6e565b82525050565b6000602082019050610aa46000830184610a80565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610ae4578082015181840152602081019050610ac9565b60008484015250505050565b6000601f19601f8301169050919050565b6000610b0c82610aaa565b610b168185610ab5565b9350610b26818560208601610ac6565b610b2f81610af0565b840191505092915050565b60006020820190508181036000830152610b548184610b01565b905092915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112610b9557610b94610b70565b5b8235905067ffffffffffffffff811115610bb257610bb1610b75565b5b602083019150836001820283011115610bce57610bcd610b7a565b5b9250929050565b60008060208385031215610bec57610beb610b66565b5b600083013567ffffffffffffffff811115610c0a57610c09610b6b565b5b610c1685828601610b7f565b92509250509250929050565b610c2b81610a6e565b8114610c3657600080fd5b50565b600081359050610c4881610c22565b92915050565b600060208284031215610c6457610c63610b66565b5b6000610c7284828501610c39565b91505092915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610cb882610af0565b810181811067ffffffffffffffff82111715610cd757610cd6610c80565b5b80604052505050565b6000610cea610b5c565b9050610cf68282610caf565b919050565b600067ffffffffffffffff821115610d1657610d15610c80565b5b610d1f82610af0565b9050602081019050919050565b82818337600083830152505050565b6000610d4e610d4984610cfb565b610ce0565b905082815260208101848484011115610d6a57610d69610c7b565b5b610d75848285610d2c565b509392505050565b600082601f830112610d9257610d91610b70565b5b8135610da2848260208601610d3b565b91505092915050565b600060208284031215610dc157610dc0610b66565b5b600082013567ffffffffffffffff811115610ddf57610dde610b6b565b5b610deb84828501610d7d565b91505092915050565b60008115159050919050565b610e0981610df4565b82525050565b600081519050919050565b600082825260208201905092915050565b6000610e3682610e0f565b610e408185610e1a565b9350610e50818560208601610ac6565b610e5981610af0565b840191505092915050565b6000604082019050610e796000830185610e00565b8181036020830152610e8b8184610e2b565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610ed457610ed3610e94565b5b50565b6000819050610ee582610ec3565b919050565b6000610ef582610ed7565b9050919050565b610f0581610eea565b82525050565b6000602082019050610f206000830184610efc565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610f5b81610a6e565b82525050565b6000610f6d8383610f52565b60208301905092915050565b6000602082019050919050565b6000610f9182610f26565b610f9b8185610f31565b9350610fa683610f42565b8060005b83811015610fd7578151610fbe8882610f61565b9750610fc983610f79565b925050600181019050610faa565b5085935050505092915050565b60006020820190508181036000830152610ffe8184610f86565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061104d57607f821691505b6020821081036110605761105f611006565b5b50919050565b600081905092915050565b50565b6000611081600083611066565b915061108c82611071565b600082019050919050565b60006110a282611074565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006110e682610a1a565b91506110f183610a1a565b9250828201905080821115611109576111086110ac565b5b92915050565b600061111a82610a1a565b915061112583610a1a565b925082820390508181111561113d5761113c6110ac565b5b9291505056fea2646970667358221220b147f6c60ac198458455e9e48f9df42fc759447a42243ca162f0f8e4c95dc08d64736f6c6343000814003360806040523480156200001157600080fd5b50604051620015a7380380620015a7833981810160405281019062000037919062000510565b8660008190555085600190816200004f919062000823565b5084600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600260146101000a81548160ff02191690836001811115620000ba57620000b96200090a565b5b021790555083600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff8111156200011e576200011d62000347565b5b6040519080825280602002602001820160405280156200014d5781602001602082028036833780820191505090505b5060049080519060200190620001659291906200022f565b506004859080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508260068190555081600781905550806008819055505050505050505062000939565b828054828255906000526020600020908101928215620002ab579160200282015b82811115620002aa5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019062000250565b5b509050620002ba9190620002be565b5090565b5b80821115620002d9576000816000905550600101620002bf565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6200030681620002f1565b81146200031257600080fd5b50565b6000815190506200032681620002fb565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620003818262000336565b810181811067ffffffffffffffff82111715620003a357620003a262000347565b5b80604052505050565b6000620003b8620002dd565b9050620003c6828262000376565b919050565b600067ffffffffffffffff821115620003e957620003e862000347565b5b620003f48262000336565b9050602081019050919050565b60005b838110156200042157808201518184015260208101905062000404565b60008484015250505050565b6000620004446200043e84620003cb565b620003ac565b90508281526020810184848401111562000463576200046262000331565b5b6200047084828562000401565b509392505050565b600082601f83011262000490576200048f6200032c565b5b8151620004a28482602086016200042d565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620004d882620004ab565b9050919050565b620004ea81620004cb565b8114620004f657600080fd5b50565b6000815190506200050a81620004df565b92915050565b600080600080600080600060e0888a031215620005325762000531620002e7565b5b6000620005428a828b0162000315565b975050602088015167ffffffffffffffff811115620005665762000565620002ec565b5b620005748a828b0162000478565b9650506040620005878a828b01620004f9565b95505060606200059a8a828b01620004f9565b9450506080620005ad8a828b0162000315565b93505060a0620005c08a828b0162000315565b92505060c0620005d38a828b0162000315565b91505092959891949750929550565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200063557607f821691505b6020821081036200064b576200064a620005ed565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620006b57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000676565b620006c1868362000676565b95508019841693508086168417925050509392505050565b6000819050919050565b600062000704620006fe620006f884620002f1565b620006d9565b620002f1565b9050919050565b6000819050919050565b6200072083620006e3565b620007386200072f826200070b565b84845462000683565b825550505050565b600090565b6200074f62000740565b6200075c81848462000715565b505050565b5b8181101562000784576200077860008262000745565b60018101905062000762565b5050565b601f821115620007d3576200079d8162000651565b620007a88462000666565b81016020851015620007b8578190505b620007d0620007c78562000666565b83018262000761565b50505b505050565b600082821c905092915050565b6000620007f860001984600802620007d8565b1980831691505092915050565b6000620008138383620007e5565b9150826002028217905092915050565b6200082e82620005e2565b67ffffffffffffffff8111156200084a576200084962000347565b5b6200085682546200061c565b6200086382828562000788565b600060209050601f8311600181146200089b576000841562000886578287015190505b62000892858262000805565b86555062000902565b601f198416620008ab8662000651565b60005b82811015620008d557848901518255600182019150602085019450602081019050620008ae565b86831015620008f55784890151620008f1601f891682620007e5565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b610c5e80620009496000396000f3fe60806040526004361061009c5760003560e01c80636e11a0a7116100645780636e11a0a7146101575780637fb3761e1461018257806391ac4b88146101ad578063d76a9936146101d8578063ea63a04414610203578063fdff62501461022e5761009c565b806302405ef2146100a15780630ee2cb10146100cc5780631a092541146100f75780634a64e52e14610122578063565a2e2c1461012c575b600080fd5b3480156100ad57600080fd5b506100b661026b565b6040516100c39190610826565b60405180910390f35b3480156100d857600080fd5b506100e1610274565b6040516100ee9190610882565b60405180910390f35b34801561010357600080fd5b5061010c61029e565b604051610119919061092d565b60405180910390f35b61012a610330565b005b34801561013857600080fd5b50610141610500565b60405161014e9190610882565b60405180910390f35b34801561016357600080fd5b5061016c61052a565b6040516101799190610826565b60405180910390f35b34801561018e57600080fd5b50610197610534565b6040516101a491906109c6565b60405180910390f35b3480156101b957600080fd5b506101c261054b565b6040516101cf9190610826565b60405180910390f35b3480156101e457600080fd5b506101ed610555565b6040516101fa9190610826565b60405180910390f35b34801561020f57600080fd5b5061021861055f565b6040516102259190610a9f565b60405180910390f35b34801561023a57600080fd5b5061025560048036038101906102509190610af2565b6105ed565b6040516102629190610826565b60405180910390f35b60008054905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600180546102ad90610b4e565b80601f01602080910402602001604051908101604052809291908181526020018280546102d990610b4e565b80156103265780601f106102fb57610100808354040283529160200191610326565b820191906000526020600020905b81548152906001019060200180831161030957829003601f168201915b5050505050905090565b600060018111156103445761034361094f565b5b600260149054906101000a900460ff1660018111156103665761036561094f565b5b1461039d576040517f3769121300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6008543410156103d9576040517fef23d9c800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6004339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555034600660008282546104929190610bae565b925050819055503373ffffffffffffffffffffffffffffffffffffffff166000547f8a488dc8cd2ade9e472d438b05d4ca99d4b6eb64c602e26a33888999bcdc7df3346040516104e29190610826565b60405180910390a3600754600654106104fe576104fd610636565b5b565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600654905090565b6000600260149054906101000a900460ff16905090565b6000600754905090565b6000600854905090565b606060048054806020026020016040519081016040528092919081815260200182805480156105e357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610599575b5050505050905090565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600181111561064a5761064961094f565b5b600260149054906101000a900460ff16600181111561066c5761066b61094f565b5b146106a3576040517f3769121300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166006546040516106ed90610c13565b60006040518083038185875af1925050503d806000811461072a576040519150601f19603f3d011682016040523d82523d6000602084013e61072f565b606091505b505090508061076a576040517fbbb321ec00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600260146101000a81548160ff021916908360018111156107905761078f61094f565b5b0217905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166000547f01a71bd9aa6dc3be63731106cb3d0b8b6d5c38e3f8936ba655827d5d6daa17cc6006546040516108029190610826565b60405180910390a350565b6000819050919050565b6108208161080d565b82525050565b600060208201905061083b6000830184610817565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061086c82610841565b9050919050565b61087c81610861565b82525050565b60006020820190506108976000830184610873565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156108d75780820151818401526020810190506108bc565b60008484015250505050565b6000601f19601f8301169050919050565b60006108ff8261089d565b61090981856108a8565b93506109198185602086016108b9565b610922816108e3565b840191505092915050565b6000602082019050818103600083015261094781846108f4565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6002811061098f5761098e61094f565b5b50565b60008190506109a08261097e565b919050565b60006109b082610992565b9050919050565b6109c0816109a5565b82525050565b60006020820190506109db60008301846109b7565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610a1681610861565b82525050565b6000610a288383610a0d565b60208301905092915050565b6000602082019050919050565b6000610a4c826109e1565b610a5681856109ec565b9350610a61836109fd565b8060005b83811015610a92578151610a798882610a1c565b9750610a8483610a34565b925050600181019050610a65565b5085935050505092915050565b60006020820190508181036000830152610ab98184610a41565b905092915050565b600080fd5b610acf81610861565b8114610ada57600080fd5b50565b600081359050610aec81610ac6565b92915050565b600060208284031215610b0857610b07610ac1565b5b6000610b1684828501610add565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610b6657607f821691505b602082108103610b7957610b78610b1f565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610bb98261080d565b9150610bc48361080d565b9250828201905080821115610bdc57610bdb610b7f565b5b92915050565b600081905092915050565b50565b6000610bfd600083610be2565b9150610c0882610bed565b600082019050919050565b6000610c1e82610bf0565b915081905091905056fea26469706673582212204b950669c84958db1d4a02b86a58ac53407b643ea18fdb9d3b0795e1d18d276364736f6c63430008140033a2646970667358221220647ca903f04e51be1d8e9ee80051d6ad27c8b5384135965d132350be12ee02a964736f6c63430008140033",
  "deployedBytecode": "0x608060405260043610620000925760003560e01c8063a45bde451162000061578063a45bde451462000137578063c4b9a6f81462000167578063e4aafc2c1462000197578063e8d9469f14620001c7578063e95d0568146200020b5762000092565b80631a93d1c3146200009757806345c6877814620000c75780634acb9d4f14620000e757806388656f3e1462000117575b600080fd5b348015620000a457600080fd5b50620000af6200023b565b604051620000be919062000d52565b60405180910390f35b620000e56004803603810190620000df919062000f7b565b6200025b565b005b348015620000f457600080fd5b50620000ff62000637565b6040516200010e9190620010da565b60405180910390f35b6200013560048036038101906200012f919062000f7b565b620006c7565b005b3480156200014457600080fd5b506200014f62000818565b6040516200015e919062001169565b60405180910390f35b3480156200017457600080fd5b506200017f62000840565b6040516200018e9190620011ab565b60405180910390f35b348015620001a457600080fd5b50620001af62000868565b604051620001be919062000d52565b60405180910390f35b348015620001d457600080fd5b50620001f36004803603810190620001ed9190620011c8565b62000872565b60405162000202919062000d52565b60405180910390f35b3480156200021857600080fd5b5062000223620008ba565b60405162000232919062001223565b60405180910390f35b6000600160009054906101000a900463ffffffff1663ffffffff16905090565b6001600360008282546200027091906200126f565b925050819055506000600354853386348787604051620002909062000d1b565b620002a2979695949392919062001344565b604051809103906000f080158015620002bf573d6000803e3d6000fd5b5090506000604051806101400160405280620002dd600354620008dc565b604051602001620002ef919062001430565b60405160208183030381529060405281526020016040518060400160405280600281526020017f307800000000000000000000000000000000000000000000000000000000000081525081526020018373ffffffffffffffffffffffffffffffffffffffff168152602001600160009054906101000a900463ffffffff1663ffffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff168152602001600060ff1681526020016040518060400160405280600281526020017f307800000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600281526020017f307800000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600281526020017f30780000000000000000000000000000000000000000000000000000000000008152508152602001600160049054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff1681525090506200048881620009b5565b6002829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f236f70f4f540eb28fe7453185cf0574276aac9f6ebb887a59f51f184acd4b78c60035460405162000563919062000d52565b60405180910390a48173ffffffffffffffffffffffffffffffffffffffff16636682717e34336040518363ffffffff1660e01b8152600401620005a791906200145a565b6000604051808303818588803b158015620005c157600080fd5b505af1158015620005d6573d6000803e3d6000fd5b50505050508173ffffffffffffffffffffffffffffffffffffffff167fc253f5abb69e38f225daa366045a23a2bf233aa243be30c7baef3a32636440cb600354346040516200062792919062001477565b60405180910390a2505050505050565b60606002805480602002602001604051908101604052809291908181526020018280548015620006bd57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831162000672575b5050505050905090565b600160036000828254620006dc91906200126f565b925050819055506000600354853386348787604051620006fc9062000d29565b6200070e979695949392919062001344565b604051809103906000f0801580156200072b573d6000803e3d6000fd5b5090506002819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f236f70f4f540eb28fe7453185cf0574276aac9f6ebb887a59f51f184acd4b78c60035460405162000809919062000d52565b60405180910390a45050505050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600354905090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600160049054906101000a90046bffffffffffffffffffffffff16905090565b606060006001620008ed8462000baf565b01905060008167ffffffffffffffff8111156200090f576200090e62000d9e565b5b6040519080825280601f01601f191660200182016040528015620009425781602001600182028036833780820191505090505b509050600082602001820190505b600115620009aa578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85816200099d576200099c620014a4565b5b0494506000850362000950575b819350505050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f00000000000000000000000000000000000000000000000000000000000000008361012001516040518363ffffffff1660e01b815260040162000a379291906200150c565b6020604051808303816000875af115801562000a57573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a7d919062001576565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633f678e11836040518263ffffffff1660e01b815260040162000adb9190620017b1565b6020604051808303816000875af115801562000afb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b219190620017ec565b90506000811462000b795780600080846040015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555062000bab565b6040517f1aff3dde00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831062000c11577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838162000c075762000c06620014a4565b5b0492506040810190505b6d04ee2d6d415b85acef8100000000831062000c52576d04ee2d6d415b85acef8100000000838162000c485762000c47620014a4565b5b0492506020810190505b662386f26fc10000831062000c8557662386f26fc10000838162000c7b5762000c7a620014a4565b5b0492506010810190505b6305f5e100831062000cb2576305f5e100838162000ca85762000ca7620014a4565b5b0492506008810190505b612710831062000cdb57612710838162000cd15762000cd0620014a4565b5b0492506004810190505b6064831062000d02576064838162000cf85762000cf7620014a4565b5b0492506002810190505b600a831062000d12576001810190505b80915050919050565b611ac9806200181f83390190565b6115a780620032e883390190565b6000819050919050565b62000d4c8162000d37565b82525050565b600060208201905062000d69600083018462000d41565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000dd88262000d8d565b810181811067ffffffffffffffff8211171562000dfa5762000df962000d9e565b5b80604052505050565b600062000e0f62000d6f565b905062000e1d828262000dcd565b919050565b600067ffffffffffffffff82111562000e405762000e3f62000d9e565b5b62000e4b8262000d8d565b9050602081019050919050565b82818337600083830152505050565b600062000e7e62000e788462000e22565b62000e03565b90508281526020810184848401111562000e9d5762000e9c62000d88565b5b62000eaa84828562000e58565b509392505050565b600082601f83011262000eca5762000ec962000d83565b5b813562000edc84826020860162000e67565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000f128262000ee5565b9050919050565b62000f248162000f05565b811462000f3057600080fd5b50565b60008135905062000f448162000f19565b92915050565b62000f558162000d37565b811462000f6157600080fd5b50565b60008135905062000f758162000f4a565b92915050565b6000806000806080858703121562000f985762000f9762000d79565b5b600085013567ffffffffffffffff81111562000fb95762000fb862000d7e565b5b62000fc78782880162000eb2565b945050602062000fda8782880162000f33565b935050604062000fed8782880162000f64565b9250506060620010008782880162000f64565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b620010438162000f05565b82525050565b600062001057838362001038565b60208301905092915050565b6000602082019050919050565b60006200107d826200100c565b62001089818562001017565b9350620010968362001028565b8060005b83811015620010cd578151620010b1888262001049565b9750620010be8362001063565b9250506001810190506200109a565b5085935050505092915050565b60006020820190508181036000830152620010f6818462001070565b905092915050565b6000819050919050565b600062001129620011236200111d8462000ee5565b620010fe565b62000ee5565b9050919050565b60006200113d8262001108565b9050919050565b6000620011518262001130565b9050919050565b620011638162001144565b82525050565b600060208201905062001180600083018462001158565b92915050565b6000620011938262001130565b9050919050565b620011a58162001186565b82525050565b6000602082019050620011c260008301846200119a565b92915050565b600060208284031215620011e157620011e062000d79565b5b6000620011f18482850162000f33565b91505092915050565b60006bffffffffffffffffffffffff82169050919050565b6200121d81620011fa565b82525050565b60006020820190506200123a600083018462001212565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006200127c8262000d37565b9150620012898362000d37565b9250828201905080821115620012a457620012a362001240565b5b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015620012e6578082015181840152602081019050620012c9565b60008484015250505050565b6000620012ff82620012aa565b6200130b8185620012b5565b93506200131d818560208601620012c6565b620013288162000d8d565b840191505092915050565b6200133e8162000f05565b82525050565b600060e0820190506200135b600083018a62000d41565b81810360208301526200136f8189620012f2565b905062001380604083018862001333565b6200138f606083018762001333565b6200139e608083018662000d41565b620013ad60a083018562000d41565b620013bc60c083018462000d41565b98975050505050505050565b7f43616d706169676e200000000000000000000000000000000000000000000000815250565b600081905092915050565b60006200140682620012aa565b620014128185620013ee565b935062001424818560208601620012c6565b80840191505092915050565b60006200143d82620013c8565b6009820191506200144f8284620013f9565b915081905092915050565b600060208201905062001471600083018462001333565b92915050565b60006040820190506200148e600083018562000d41565b6200149d602083018462000d41565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000620014f4620014ee620014e884620011fa565b620010fe565b62000d37565b9050919050565b6200150681620014d3565b82525050565b600060408201905062001523600083018562001333565b620015326020830184620014fb565b9392505050565b60008115159050919050565b620015508162001539565b81146200155c57600080fd5b50565b600081519050620015708162001545565b92915050565b6000602082840312156200158f576200158e62000d79565b5b60006200159f848285016200155f565b91505092915050565b600082825260208201905092915050565b6000620015c682620012aa565b620015d28185620015a8565b9350620015e4818560208601620012c6565b620015ef8162000d8d565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b60006200162382620015fa565b6200162f818562001605565b935062001641818560208601620012c6565b6200164c8162000d8d565b840191505092915050565b600063ffffffff82169050919050565b620016728162001657565b82525050565b600060ff82169050919050565b620016908162001678565b82525050565b620016a181620011fa565b82525050565b6000610140830160008301518482036000860152620016c78282620015b9565b91505060208301518482036020860152620016e3828262001616565b9150506040830151620016fa604086018262001038565b5060608301516200170f606086018262001667565b50608083015162001724608086018262001038565b5060a08301516200173960a086018262001685565b5060c083015184820360c086015262001753828262001616565b91505060e083015184820360e08601526200176f828262001616565b9150506101008301518482036101008601526200178d828262001616565b915050610120830151620017a661012086018262001696565b508091505092915050565b60006020820190508181036000830152620017cd8184620016a7565b905092915050565b600081519050620017e68162000f4a565b92915050565b60006020828403121562001805576200180462000d79565b5b60006200181584828501620017d5565b9150509291505056fe60806040523480156200001157600080fd5b5060405162001ac938038062001ac9833981810160405281019062000037919062000517565b8660008190555085600190816200004f91906200082a565b5084600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600260146101000a81548160ff02191690836001811115620000ba57620000b962000911565b5b021790555083600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff8111156200011e576200011d6200034e565b5b6040519080825280602002602001820160405280156200014d5781602001602082028036833780820191505090505b50600490805190602001906200016592919062000236565b506004859080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550826006819055504260078190555081600881905550806009819055505050505050505062000940565b828054828255906000526020600020908101928215620002b2579160200282015b82811115620002b15782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019062000257565b5b509050620002c19190620002c5565b5090565b5b80821115620002e0576000816000905550600101620002c6565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6200030d81620002f8565b81146200031957600080fd5b50565b6000815190506200032d8162000302565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000388826200033d565b810181811067ffffffffffffffff82111715620003aa57620003a96200034e565b5b80604052505050565b6000620003bf620002e4565b9050620003cd82826200037d565b919050565b600067ffffffffffffffff821115620003f057620003ef6200034e565b5b620003fb826200033d565b9050602081019050919050565b60005b83811015620004285780820151818401526020810190506200040b565b60008484015250505050565b60006200044b6200044584620003d2565b620003b3565b9050828152602081018484840111156200046a576200046962000338565b5b6200047784828562000408565b509392505050565b600082601f83011262000497576200049662000333565b5b8151620004a984826020860162000434565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620004df82620004b2565b9050919050565b620004f181620004d2565b8114620004fd57600080fd5b50565b6000815190506200051181620004e6565b92915050565b600080600080600080600060e0888a031215620005395762000538620002ee565b5b6000620005498a828b016200031c565b975050602088015167ffffffffffffffff8111156200056d576200056c620002f3565b5b6200057b8a828b016200047f565b96505060406200058e8a828b0162000500565b9550506060620005a18a828b0162000500565b9450506080620005b48a828b016200031c565b93505060a0620005c78a828b016200031c565b92505060c0620005da8a828b016200031c565b91505092959891949750929550565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200063c57607f821691505b602082108103620006525762000651620005f4565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620006bc7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200067d565b620006c886836200067d565b95508019841693508086168417925050509392505050565b6000819050919050565b60006200070b62000705620006ff84620002f8565b620006e0565b620002f8565b9050919050565b6000819050919050565b6200072783620006ea565b6200073f620007368262000712565b8484546200068a565b825550505050565b600090565b6200075662000747565b620007638184846200071c565b505050565b5b818110156200078b576200077f6000826200074c565b60018101905062000769565b5050565b601f821115620007da57620007a48162000658565b620007af846200066d565b81016020851015620007bf578190505b620007d7620007ce856200066d565b83018262000768565b50505b505050565b600082821c905092915050565b6000620007ff60001984600802620007df565b1980831691505092915050565b60006200081a8383620007ec565b9150826002028217905092915050565b6200083582620005e9565b67ffffffffffffffff8111156200085157620008506200034e565b5b6200085d825462000623565b6200086a8282856200078f565b600060209050601f831160018114620008a257600084156200088d578287015190505b6200089985826200080c565b86555062000909565b601f198416620008b28662000658565b60005b82811015620008dc57848901518255600182019150602085019450602081019050620008b5565b86831015620008fc5784890151620008f8601f891682620007ec565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b61117980620009506000396000f3fe6080604052600436106100dd5760003560e01c80636e11a0a71161007f578063d76a993611610059578063d76a993614610292578063ea63a044146102bd578063fca55c8a146102e8578063fdff625014610313576100dd565b80636e11a0a7146102115780637fb3761e1461023c578063bbe303d014610267576100dd565b80634585e33b116100bb5780634585e33b14610163578063565a2e2c1461018c5780636682717e146101b75780636e04ff0d146101d3576100dd565b806302405ef2146100e25780630ee2cb101461010d5780631a09254114610138575b600080fd5b3480156100ee57600080fd5b506100f7610350565b6040516101049190610a33565b60405180910390f35b34801561011957600080fd5b50610122610359565b60405161012f9190610a8f565b60405180910390f35b34801561014457600080fd5b5061014d610383565b60405161015a9190610b3a565b60405180910390f35b34801561016f57600080fd5b5061018a60048036038101906101859190610bd5565b610415565b005b34801561019857600080fd5b506101a16105d4565b6040516101ae9190610a8f565b60405180910390f35b6101d160048036038101906101cc9190610c4e565b6105fe565b005b3480156101df57600080fd5b506101fa60048036038101906101f59190610dab565b61089c565b604051610208929190610e64565b60405180910390f35b34801561021d57600080fd5b50610226610904565b6040516102339190610a33565b60405180910390f35b34801561024857600080fd5b5061025161090e565b60405161025e9190610f0b565b60405180910390f35b34801561027357600080fd5b5061027c610925565b6040516102899190610a33565b60405180910390f35b34801561029e57600080fd5b506102a761092f565b6040516102b49190610a33565b60405180910390f35b3480156102c957600080fd5b506102d2610939565b6040516102df9190610fe4565b60405180910390f35b3480156102f457600080fd5b506102fd6109c7565b60405161030a9190610a33565b60405180910390f35b34801561031f57600080fd5b5061033a60048036038101906103359190610c4e565b6109d1565b6040516103479190610a33565b60405180910390f35b60008054905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606001805461039290611035565b80601f01602080910402602001604051908101604052809291908181526020018280546103be90611035565b801561040b5780601f106103e05761010080835404028352916020019161040b565b820191906000526020600020905b8154815290600101906020018083116103ee57829003601f168201915b5050505050905090565b600061042f6040518060200160405280600081525061089c565b50905080610469576040517fdaf5e3f200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16476040516104b190611097565b60006040518083038185875af1925050503d80600081146104ee576040519150601f19603f3d011682016040523d82523d6000602084013e6104f3565b606091505b505090508061052e576040517f4362598600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600260146101000a81548160ff0219169083600181111561055457610553610e94565b5b0217905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166000547f01a71bd9aa6dc3be63731106cb3d0b8b6d5c38e3f8936ba655827d5d6daa17cc6006546040516105c69190610a33565b60405180910390a350505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600181111561061257610611610e94565b5b600260149054906101000a900460ff16600181111561063457610633610e94565b5b1461066b576040517f2bb7f64300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6009543410156106a7576040517f5aafc1ec00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610787576004339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061082f565b6004819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b346006600082825461084191906110db565b925050819055503373ffffffffffffffffffffffffffffffffffffffff166000547f8a488dc8cd2ade9e472d438b05d4ca99d4b6eb64c602e26a33888999bcdc7df3346040516108919190610a33565b60405180910390a350565b600060606000600854600754426108b3919061110f565b1190506000600260149054906101000a900460ff1660018111156108da576108d9610e94565b5b600060018111156108ee576108ed610e94565b5b1490508180156108fb5750805b93505050915091565b6000600654905090565b6000600260149054906101000a900460ff16905090565b6000600854905090565b6000600954905090565b606060048054806020026020016040519081016040528092919081815260200182805480156109bd57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610973575b5050505050905090565b6000600754905090565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000819050919050565b610a2d81610a1a565b82525050565b6000602082019050610a486000830184610a24565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a7982610a4e565b9050919050565b610a8981610a6e565b82525050565b6000602082019050610aa46000830184610a80565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610ae4578082015181840152602081019050610ac9565b60008484015250505050565b6000601f19601f8301169050919050565b6000610b0c82610aaa565b610b168185610ab5565b9350610b26818560208601610ac6565b610b2f81610af0565b840191505092915050565b60006020820190508181036000830152610b548184610b01565b905092915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112610b9557610b94610b70565b5b8235905067ffffffffffffffff811115610bb257610bb1610b75565b5b602083019150836001820283011115610bce57610bcd610b7a565b5b9250929050565b60008060208385031215610bec57610beb610b66565b5b600083013567ffffffffffffffff811115610c0a57610c09610b6b565b5b610c1685828601610b7f565b92509250509250929050565b610c2b81610a6e565b8114610c3657600080fd5b50565b600081359050610c4881610c22565b92915050565b600060208284031215610c6457610c63610b66565b5b6000610c7284828501610c39565b91505092915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610cb882610af0565b810181811067ffffffffffffffff82111715610cd757610cd6610c80565b5b80604052505050565b6000610cea610b5c565b9050610cf68282610caf565b919050565b600067ffffffffffffffff821115610d1657610d15610c80565b5b610d1f82610af0565b9050602081019050919050565b82818337600083830152505050565b6000610d4e610d4984610cfb565b610ce0565b905082815260208101848484011115610d6a57610d69610c7b565b5b610d75848285610d2c565b509392505050565b600082601f830112610d9257610d91610b70565b5b8135610da2848260208601610d3b565b91505092915050565b600060208284031215610dc157610dc0610b66565b5b600082013567ffffffffffffffff811115610ddf57610dde610b6b565b5b610deb84828501610d7d565b91505092915050565b60008115159050919050565b610e0981610df4565b82525050565b600081519050919050565b600082825260208201905092915050565b6000610e3682610e0f565b610e408185610e1a565b9350610e50818560208601610ac6565b610e5981610af0565b840191505092915050565b6000604082019050610e796000830185610e00565b8181036020830152610e8b8184610e2b565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610ed457610ed3610e94565b5b50565b6000819050610ee582610ec3565b919050565b6000610ef582610ed7565b9050919050565b610f0581610eea565b82525050565b6000602082019050610f206000830184610efc565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610f5b81610a6e565b82525050565b6000610f6d8383610f52565b60208301905092915050565b6000602082019050919050565b6000610f9182610f26565b610f9b8185610f31565b9350610fa683610f42565b8060005b83811015610fd7578151610fbe8882610f61565b9750610fc983610f79565b925050600181019050610faa565b5085935050505092915050565b60006020820190508181036000830152610ffe8184610f86565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061104d57607f821691505b6020821081036110605761105f611006565b5b50919050565b600081905092915050565b50565b6000611081600083611066565b915061108c82611071565b600082019050919050565b60006110a282611074565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006110e682610a1a565b91506110f183610a1a565b9250828201905080821115611109576111086110ac565b5b92915050565b600061111a82610a1a565b915061112583610a1a565b925082820390508181111561113d5761113c6110ac565b5b9291505056fea2646970667358221220b147f6c60ac198458455e9e48f9df42fc759447a42243ca162f0f8e4c95dc08d64736f6c6343000814003360806040523480156200001157600080fd5b50604051620015a7380380620015a7833981810160405281019062000037919062000510565b8660008190555085600190816200004f919062000823565b5084600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600260146101000a81548160ff02191690836001811115620000ba57620000b96200090a565b5b021790555083600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff8111156200011e576200011d62000347565b5b6040519080825280602002602001820160405280156200014d5781602001602082028036833780820191505090505b5060049080519060200190620001659291906200022f565b506004859080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508260068190555081600781905550806008819055505050505050505062000939565b828054828255906000526020600020908101928215620002ab579160200282015b82811115620002aa5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019062000250565b5b509050620002ba9190620002be565b5090565b5b80821115620002d9576000816000905550600101620002bf565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6200030681620002f1565b81146200031257600080fd5b50565b6000815190506200032681620002fb565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620003818262000336565b810181811067ffffffffffffffff82111715620003a357620003a262000347565b5b80604052505050565b6000620003b8620002dd565b9050620003c6828262000376565b919050565b600067ffffffffffffffff821115620003e957620003e862000347565b5b620003f48262000336565b9050602081019050919050565b60005b838110156200042157808201518184015260208101905062000404565b60008484015250505050565b6000620004446200043e84620003cb565b620003ac565b90508281526020810184848401111562000463576200046262000331565b5b6200047084828562000401565b509392505050565b600082601f83011262000490576200048f6200032c565b5b8151620004a28482602086016200042d565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620004d882620004ab565b9050919050565b620004ea81620004cb565b8114620004f657600080fd5b50565b6000815190506200050a81620004df565b92915050565b600080600080600080600060e0888a031215620005325762000531620002e7565b5b6000620005428a828b0162000315565b975050602088015167ffffffffffffffff811115620005665762000565620002ec565b5b620005748a828b0162000478565b9650506040620005878a828b01620004f9565b95505060606200059a8a828b01620004f9565b9450506080620005ad8a828b0162000315565b93505060a0620005c08a828b0162000315565b92505060c0620005d38a828b0162000315565b91505092959891949750929550565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200063557607f821691505b6020821081036200064b576200064a620005ed565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620006b57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000676565b620006c1868362000676565b95508019841693508086168417925050509392505050565b6000819050919050565b600062000704620006fe620006f884620002f1565b620006d9565b620002f1565b9050919050565b6000819050919050565b6200072083620006e3565b620007386200072f826200070b565b84845462000683565b825550505050565b600090565b6200074f62000740565b6200075c81848462000715565b505050565b5b8181101562000784576200077860008262000745565b60018101905062000762565b5050565b601f821115620007d3576200079d8162000651565b620007a88462000666565b81016020851015620007b8578190505b620007d0620007c78562000666565b83018262000761565b50505b505050565b600082821c905092915050565b6000620007f860001984600802620007d8565b1980831691505092915050565b6000620008138383620007e5565b9150826002028217905092915050565b6200082e82620005e2565b67ffffffffffffffff8111156200084a576200084962000347565b5b6200085682546200061c565b6200086382828562000788565b600060209050601f8311600181146200089b576000841562000886578287015190505b62000892858262000805565b86555062000902565b601f198416620008ab8662000651565b60005b82811015620008d557848901518255600182019150602085019450602081019050620008ae565b86831015620008f55784890151620008f1601f891682620007e5565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b610c5e80620009496000396000f3fe60806040526004361061009c5760003560e01c80636e11a0a7116100645780636e11a0a7146101575780637fb3761e1461018257806391ac4b88146101ad578063d76a9936146101d8578063ea63a04414610203578063fdff62501461022e5761009c565b806302405ef2146100a15780630ee2cb10146100cc5780631a092541146100f75780634a64e52e14610122578063565a2e2c1461012c575b600080fd5b3480156100ad57600080fd5b506100b661026b565b6040516100c39190610826565b60405180910390f35b3480156100d857600080fd5b506100e1610274565b6040516100ee9190610882565b60405180910390f35b34801561010357600080fd5b5061010c61029e565b604051610119919061092d565b60405180910390f35b61012a610330565b005b34801561013857600080fd5b50610141610500565b60405161014e9190610882565b60405180910390f35b34801561016357600080fd5b5061016c61052a565b6040516101799190610826565b60405180910390f35b34801561018e57600080fd5b50610197610534565b6040516101a491906109c6565b60405180910390f35b3480156101b957600080fd5b506101c261054b565b6040516101cf9190610826565b60405180910390f35b3480156101e457600080fd5b506101ed610555565b6040516101fa9190610826565b60405180910390f35b34801561020f57600080fd5b5061021861055f565b6040516102259190610a9f565b60405180910390f35b34801561023a57600080fd5b5061025560048036038101906102509190610af2565b6105ed565b6040516102629190610826565b60405180910390f35b60008054905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600180546102ad90610b4e565b80601f01602080910402602001604051908101604052809291908181526020018280546102d990610b4e565b80156103265780601f106102fb57610100808354040283529160200191610326565b820191906000526020600020905b81548152906001019060200180831161030957829003601f168201915b5050505050905090565b600060018111156103445761034361094f565b5b600260149054906101000a900460ff1660018111156103665761036561094f565b5b1461039d576040517f3769121300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6008543410156103d9576040517fef23d9c800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6004339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555034600660008282546104929190610bae565b925050819055503373ffffffffffffffffffffffffffffffffffffffff166000547f8a488dc8cd2ade9e472d438b05d4ca99d4b6eb64c602e26a33888999bcdc7df3346040516104e29190610826565b60405180910390a3600754600654106104fe576104fd610636565b5b565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600654905090565b6000600260149054906101000a900460ff16905090565b6000600754905090565b6000600854905090565b606060048054806020026020016040519081016040528092919081815260200182805480156105e357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610599575b5050505050905090565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600181111561064a5761064961094f565b5b600260149054906101000a900460ff16600181111561066c5761066b61094f565b5b146106a3576040517f3769121300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166006546040516106ed90610c13565b60006040518083038185875af1925050503d806000811461072a576040519150601f19603f3d011682016040523d82523d6000602084013e61072f565b606091505b505090508061076a576040517fbbb321ec00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600260146101000a81548160ff021916908360018111156107905761078f61094f565b5b0217905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166000547f01a71bd9aa6dc3be63731106cb3d0b8b6d5c38e3f8936ba655827d5d6daa17cc6006546040516108029190610826565b60405180910390a350565b6000819050919050565b6108208161080d565b82525050565b600060208201905061083b6000830184610817565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061086c82610841565b9050919050565b61087c81610861565b82525050565b60006020820190506108976000830184610873565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156108d75780820151818401526020810190506108bc565b60008484015250505050565b6000601f19601f8301169050919050565b60006108ff8261089d565b61090981856108a8565b93506109198185602086016108b9565b610922816108e3565b840191505092915050565b6000602082019050818103600083015261094781846108f4565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6002811061098f5761098e61094f565b5b50565b60008190506109a08261097e565b919050565b60006109b082610992565b9050919050565b6109c0816109a5565b82525050565b60006020820190506109db60008301846109b7565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610a1681610861565b82525050565b6000610a288383610a0d565b60208301905092915050565b6000602082019050919050565b6000610a4c826109e1565b610a5681856109ec565b9350610a61836109fd565b8060005b83811015610a92578151610a798882610a1c565b9750610a8483610a34565b925050600181019050610a65565b5085935050505092915050565b60006020820190508181036000830152610ab98184610a41565b905092915050565b600080fd5b610acf81610861565b8114610ada57600080fd5b50565b600081359050610aec81610ac6565b92915050565b600060208284031215610b0857610b07610ac1565b5b6000610b1684828501610add565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610b6657607f821691505b602082108103610b7957610b78610b1f565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610bb98261080d565b9150610bc48361080d565b9250828201905080821115610bdc57610bdb610b7f565b5b92915050565b600081905092915050565b50565b6000610bfd600083610be2565b9150610c0882610bed565b600082019050919050565b6000610c1e82610bf0565b915081905091905056fea26469706673582212204b950669c84958db1d4a02b86a58ac53407b643ea18fdb9d3b0795e1d18d276364736f6c63430008140033a2646970667358221220647ca903f04e51be1d8e9ee80051d6ad27c8b5384135965d132350be12ee02a964736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1578,
        "contract": "contracts/TogetherForCharityContractFactory.sol:TogetherForCharityContractFactory",
        "label": "campaignAddressToUpkeepID",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1580,
        "contract": "contracts/TogetherForCharityContractFactory.sol:TogetherForCharityContractFactory",
        "label": "gasLimit",
        "offset": 0,
        "slot": "1",
        "type": "t_uint32"
      },
      {
        "astId": 1582,
        "contract": "contracts/TogetherForCharityContractFactory.sol:TogetherForCharityContractFactory",
        "label": "linkAmount",
        "offset": 4,
        "slot": "1",
        "type": "t_uint96"
      },
      {
        "astId": 1585,
        "contract": "contracts/TogetherForCharityContractFactory.sol:TogetherForCharityContractFactory",
        "label": "deployedCampaigns",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1587,
        "contract": "contracts/TogetherForCharityContractFactory.sol:TogetherForCharityContractFactory",
        "label": "numberOfCampaigns",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}